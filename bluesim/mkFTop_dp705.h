/*
 * Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
 * 
 * On Tue Oct 16 15:37:58 EDT 2012
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkFTop_dp705_h__
#define __mkFTop_dp705_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkBuffer.h"
#include "mkChecker.h"
#include "mkFHReceiver.h"
#include "mkFHSender.h"
#include "mkGenerator.h"
#include "mkMHReceiver.h"
#include "mkMHSender.h"


/* Class declaration for the mkFTop_dp705 module */
class MOD_mkFTop_dp705 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkBuffer INST_buf1;
  MOD_mkChecker INST_chk;
  MOD_Reg<tUInt32> INST_cycleCounter;
  MOD_mkFHReceiver INST_fhrcv;
  MOD_mkFHSender INST_fhsnd;
  MOD_mkGenerator INST_gen1;
  MOD_mkGenerator INST_gen2;
  MOD_Reg<tUInt32> INST_length;
  MOD_mkMHReceiver INST_mhrcv;
  MOD_mkMHSender INST_mhsnd;
  MOD_SyncReset INST_rstndb;
  MOD_Fifo<tUInt64> INST_s2rF;
 
 /* Constructor */
 public:
  MOD_mkFTop_dp705(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_rstndb$OUT_RST;
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_7;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_7;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_6;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_6;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_5;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_5;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_4;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_4;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_3;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_3;
  tUInt8 DEF_WILL_FIRE_RL_cnctDwm;
  tUInt8 DEF_CAN_FIRE_RL_cnctDwm;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_2;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_2;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut;
  tUInt8 DEF_WILL_FIRE_RL_gobble;
  tUInt8 DEF_CAN_FIRE_RL_gobble;
  tUInt8 DEF_WILL_FIRE_RL_cycleCount;
  tUInt8 DEF_CAN_FIRE_RL_cycleCount;
 
 /* Local definitions */
 private:
  tUInt32 DEF__read__h659;
 
 /* Rules */
 public:
  void RL_cycleCount();
  void RL_gobble();
  void RL_mkConnectionGetPut();
  void RL_mkConnectionGetPut_1();
  void RL_mkConnectionGetPut_2();
  void RL_cnctDwm();
  void RL_mkConnectionGetPut_3();
  void RL_mkConnectionGetPut_4();
  void RL_mkConnectionGetPut_5();
  void RL_mkConnectionGetPut_6();
  void RL_mkConnectionGetPut_7();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_rstndb$OUT_RST(tUInt8 ARG_rst_in);
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
  static void static_reset_rstndb$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFTop_dp705 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkFTop_dp705 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkFTop_dp705 &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkFTop_dp705 &backing);
};

#endif /* ifndef __mkFTop_dp705_h__ */
