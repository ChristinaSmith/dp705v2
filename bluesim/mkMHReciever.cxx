/*
 * Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
 * 
 * On Thu Oct 11 17:17:19 EDT 2012
 * 
 */
#include "bluesim_primitives.h"
#include "mkMHReciever.h"


/* Constructor */
MOD_mkMHReciever::MOD_mkMHReciever(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_countRd(simHdl, "countRd", this, 9u, 0u, (tUInt8)0u),
    INST_countRdReq(simHdl, "countRdReq", this, 9u, 0u, (tUInt8)0u),
    INST_countWrd(simHdl, "countWrd", this, 16u, 0u, (tUInt8)0u),
    INST_endHead(simHdl, "endHead", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_hp(simHdl, "hp", this, 9u, 0u, (tUInt8)0u),
    INST_length(simHdl, "length", this, 16u, 0u, (tUInt8)0u),
    INST_mesgInF(simHdl, "mesgInF", this, 33u, 2u, 1u, 0u),
    INST_mesgOutF(simHdl, "mesgOutF", this, 33u, 2u, 1u, 0u),
    INST_messageF(simHdl, "messageF", this, 0u, 2u, 1u, 0u),
    INST_mhV(simHdl, "mhV", this, 33u),
    INST_mhV_1(simHdl, "mhV_1", this, 33u),
    INST_mhV_2(simHdl, "mhV_2", this, 33u),
    INST_mhV_3(simHdl, "mhV_3", this, 33u),
    INST_mhV_4(simHdl, "mhV_4", this, 33u),
    INST_mhV_5(simHdl, "mhV_5", this, 33u),
    INST_msgF(simHdl, "msgF", this, 9u, 2u, 1u, 0u),
    INST_readAddr(simHdl, "readAddr", this, 9u, 0u, (tUInt8)0u),
    INST_writeAddr(simHdl, "writeAddr", this, 9u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_src_get = false;
  PORT_EN_sink_put = false;
  PORT_sink_put = 0llu;
  PORT_src_get = 0llu;
  PORT_RDY_src_get = false;
  PORT_RDY_sink_put = false;
  symbol_count = 34u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMHReciever::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_moveMessage", SYM_DEF, &DEF_CAN_FIRE_RL_moveMessage, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_rcvHeader", SYM_DEF, &DEF_CAN_FIRE_RL_rcvHeader, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_sink_put", SYM_DEF, &DEF_CAN_FIRE_sink_put, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_src_get", SYM_DEF, &DEF_CAN_FIRE_src_get, 1u);
  init_symbol(&symbols[4u], "countRd", SYM_MODULE, &INST_countRd);
  init_symbol(&symbols[5u], "countRdReq", SYM_MODULE, &INST_countRdReq);
  init_symbol(&symbols[6u], "countWrd", SYM_MODULE, &INST_countWrd);
  init_symbol(&symbols[7u], "EN_sink_put", SYM_PORT, &PORT_EN_sink_put, 1u);
  init_symbol(&symbols[8u], "EN_src_get", SYM_PORT, &PORT_EN_src_get, 1u);
  init_symbol(&symbols[9u], "endHead", SYM_MODULE, &INST_endHead);
  init_symbol(&symbols[10u], "hp", SYM_MODULE, &INST_hp);
  init_symbol(&symbols[11u], "length", SYM_MODULE, &INST_length);
  init_symbol(&symbols[12u], "mesgInF", SYM_MODULE, &INST_mesgInF);
  init_symbol(&symbols[13u], "mesgOutF", SYM_MODULE, &INST_mesgOutF);
  init_symbol(&symbols[14u], "messageF", SYM_MODULE, &INST_messageF);
  init_symbol(&symbols[15u], "mhV", SYM_MODULE, &INST_mhV);
  init_symbol(&symbols[16u], "mhV_1", SYM_MODULE, &INST_mhV_1);
  init_symbol(&symbols[17u], "mhV_2", SYM_MODULE, &INST_mhV_2);
  init_symbol(&symbols[18u], "mhV_3", SYM_MODULE, &INST_mhV_3);
  init_symbol(&symbols[19u], "mhV_4", SYM_MODULE, &INST_mhV_4);
  init_symbol(&symbols[20u], "mhV_5", SYM_MODULE, &INST_mhV_5);
  init_symbol(&symbols[21u], "msgF", SYM_MODULE, &INST_msgF);
  init_symbol(&symbols[22u], "RDY_sink_put", SYM_PORT, &PORT_RDY_sink_put, 1u);
  init_symbol(&symbols[23u], "RDY_src_get", SYM_PORT, &PORT_RDY_src_get, 1u);
  init_symbol(&symbols[24u], "RL_moveMessage", SYM_RULE);
  init_symbol(&symbols[25u], "RL_rcvHeader", SYM_RULE);
  init_symbol(&symbols[26u], "readAddr", SYM_MODULE, &INST_readAddr);
  init_symbol(&symbols[27u], "sink_put", SYM_PORT, &PORT_sink_put, 33u);
  init_symbol(&symbols[28u], "src_get", SYM_PORT, &PORT_src_get, 33u);
  init_symbol(&symbols[29u], "WILL_FIRE_RL_moveMessage", SYM_DEF, &DEF_WILL_FIRE_RL_moveMessage, 1u);
  init_symbol(&symbols[30u], "WILL_FIRE_RL_rcvHeader", SYM_DEF, &DEF_WILL_FIRE_RL_rcvHeader, 1u);
  init_symbol(&symbols[31u], "WILL_FIRE_sink_put", SYM_DEF, &DEF_WILL_FIRE_sink_put, 1u);
  init_symbol(&symbols[32u], "WILL_FIRE_src_get", SYM_DEF, &DEF_WILL_FIRE_src_get, 1u);
  init_symbol(&symbols[33u], "writeAddr", SYM_MODULE, &INST_writeAddr);
}


/* Rule actions */

void MOD_mkMHReciever::RL_rcvHeader()
{
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_1_1___d12;
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_0___d9;
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_2_3___d14;
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_3_5___d16;
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_4_7___d18;
  tUInt8 DEF_hp_ULT_6_AND_hp_EQ_5_9___d20;
  tUInt8 DEF_hp_EQ_6___d25;
  tUInt8 DEF_hp_ULT_6___d42;
  tUInt32 DEF_IF_hp_ULT_6_THEN_hp_PLUS_1_3_ELSE_0___d24;
  tUInt32 DEF_x__h2048;
  tUInt32 DEF_b__h1365;
  DEF_b__h1365 = INST_hp.METH_read();
  DEF_mesgInF_first____d41 = INST_mesgInF.METH_first();
  DEF_x__h2048 = (tUInt32)(65535u & (INST_mhV_5.METH_read() >> 16u));
  DEF_hp_ULT_6___d42 = DEF_b__h1365 < 6u;
  DEF_IF_hp_ULT_6_THEN_hp_PLUS_1_3_ELSE_0___d24 = DEF_hp_ULT_6___d42 ? 511u & (DEF_b__h1365 + 1u) : 0u;
  DEF_hp_EQ_6___d25 = DEF_b__h1365 == 6u;
  DEF_hp_ULT_6_AND_hp_EQ_5_9___d20 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 5u;
  DEF_hp_ULT_6_AND_hp_EQ_4_7___d18 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 4u;
  DEF_hp_ULT_6_AND_hp_EQ_3_5___d16 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 3u;
  DEF_hp_ULT_6_AND_hp_EQ_2_3___d14 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 2u;
  DEF_hp_ULT_6_AND_hp_EQ_0___d9 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 0u;
  DEF_hp_ULT_6_AND_hp_EQ_1_1___d12 = DEF_hp_ULT_6___d42 && DEF_b__h1365 == 1u;
  if (DEF_hp_ULT_6_AND_hp_EQ_0___d9)
    INST_mhV.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6_AND_hp_EQ_1_1___d12)
    INST_mhV_1.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6_AND_hp_EQ_2_3___d14)
    INST_mhV_2.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6_AND_hp_EQ_3_5___d16)
    INST_mhV_3.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6_AND_hp_EQ_5_9___d20)
    INST_mhV_5.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6_AND_hp_EQ_4_7___d18)
    INST_mhV_4.METH_write(DEF_mesgInF_first____d41);
  if (DEF_hp_ULT_6___d42)
    INST_mesgInF.METH_deq();
  INST_length.METH_write(DEF_x__h2048);
  INST_hp.METH_write(DEF_IF_hp_ULT_6_THEN_hp_PLUS_1_3_ELSE_0___d24);
  if (DEF_hp_EQ_6___d25)
    INST_messageF.METH_enq();
  if (DEF_hp_EQ_6___d25)
    INST_endHead.METH_write((tUInt8)0u);
}

void MOD_mkMHReciever::RL_moveMessage()
{
  tUInt8 DEF_countWrd_3_EQ_length_6_MINUS_1_7___d38;
  tUInt32 DEF_x__h2341;
  tUInt32 DEF_x__h2391;
  tUInt32 DEF_x__h2383;
  DEF_mesgInF_first____d41 = INST_mesgInF.METH_first();
  DEF_x__h2383 = INST_countWrd.METH_read();
  DEF_x__h2391 = INST_length.METH_read();
  DEF_x__h2341 = (tUInt8)(DEF_mesgInF_first____d41 >> 32u) ? 0u : 65535u & (DEF_x__h2383 + 1u);
  DEF_countWrd_3_EQ_length_6_MINUS_1_7___d38 = DEF_x__h2383 == (65535u & (DEF_x__h2391 - 1u));
  INST_mesgOutF.METH_enq(DEF_mesgInF_first____d41);
  INST_mesgInF.METH_deq();
  INST_countWrd.METH_write(DEF_x__h2341);
  if (DEF_countWrd_3_EQ_length_6_MINUS_1_7___d38)
    INST_messageF.METH_deq();
  if (DEF_countWrd_3_EQ_length_6_MINUS_1_7___d38)
    INST_endHead.METH_write((tUInt8)1u);
}


/* Methods */

tUInt64 MOD_mkMHReciever::METH_src_get()
{
  tUInt64 DEF_mesgOutF_first____d40;
  PORT_EN_src_get = (tUInt8)1u;
  DEF_WILL_FIRE_src_get = (tUInt8)1u;
  DEF_mesgOutF_first____d40 = INST_mesgOutF.METH_first();
  INST_mesgOutF.METH_deq();
  PORT_src_get = DEF_mesgOutF_first____d40;
  return PORT_src_get;
}

tUInt8 MOD_mkMHReciever::METH_RDY_src_get()
{
  DEF_CAN_FIRE_src_get = INST_mesgOutF.METH_i_notEmpty();
  PORT_RDY_src_get = DEF_CAN_FIRE_src_get;
  return PORT_RDY_src_get;
}

void MOD_mkMHReciever::METH_sink_put(tUInt64 ARG_sink_put)
{
  PORT_EN_sink_put = (tUInt8)1u;
  DEF_WILL_FIRE_sink_put = (tUInt8)1u;
  PORT_sink_put = ARG_sink_put;
  INST_mesgInF.METH_enq(ARG_sink_put);
}

tUInt8 MOD_mkMHReciever::METH_RDY_sink_put()
{
  DEF_CAN_FIRE_sink_put = INST_mesgInF.METH_i_notFull();
  PORT_RDY_sink_put = DEF_CAN_FIRE_sink_put;
  return PORT_RDY_sink_put;
}


/* Reset routines */

void MOD_mkMHReciever::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_writeAddr.reset_RST(ARG_rst_in);
  INST_readAddr.reset_RST(ARG_rst_in);
  INST_msgF.reset_RST(ARG_rst_in);
  INST_messageF.reset_RST(ARG_rst_in);
  INST_mesgOutF.reset_RST(ARG_rst_in);
  INST_mesgInF.reset_RST(ARG_rst_in);
  INST_length.reset_RST(ARG_rst_in);
  INST_hp.reset_RST(ARG_rst_in);
  INST_endHead.reset_RST(ARG_rst_in);
  INST_countWrd.reset_RST(ARG_rst_in);
  INST_countRdReq.reset_RST(ARG_rst_in);
  INST_countRd.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMHReciever::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMHReciever::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_countRd.dump_state(indent + 2u);
  INST_countRdReq.dump_state(indent + 2u);
  INST_countWrd.dump_state(indent + 2u);
  INST_endHead.dump_state(indent + 2u);
  INST_hp.dump_state(indent + 2u);
  INST_length.dump_state(indent + 2u);
  INST_mesgInF.dump_state(indent + 2u);
  INST_mesgOutF.dump_state(indent + 2u);
  INST_messageF.dump_state(indent + 2u);
  INST_mhV.dump_state(indent + 2u);
  INST_mhV_1.dump_state(indent + 2u);
  INST_mhV_2.dump_state(indent + 2u);
  INST_mhV_3.dump_state(indent + 2u);
  INST_mhV_4.dump_state(indent + 2u);
  INST_mhV_5.dump_state(indent + 2u);
  INST_msgF.dump_state(indent + 2u);
  INST_readAddr.dump_state(indent + 2u);
  INST_writeAddr.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMHReciever::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 34u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_moveMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rcvHeader", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_src_get", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_moveMessage", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rcvHeader", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mesgInF_first____d41", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sink_put", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "src_get", 33u);
  num = INST_countRd.dump_VCD_defs(num);
  num = INST_countRdReq.dump_VCD_defs(num);
  num = INST_countWrd.dump_VCD_defs(num);
  num = INST_endHead.dump_VCD_defs(num);
  num = INST_hp.dump_VCD_defs(num);
  num = INST_length.dump_VCD_defs(num);
  num = INST_mesgInF.dump_VCD_defs(num);
  num = INST_mesgOutF.dump_VCD_defs(num);
  num = INST_messageF.dump_VCD_defs(num);
  num = INST_mhV.dump_VCD_defs(num);
  num = INST_mhV_1.dump_VCD_defs(num);
  num = INST_mhV_2.dump_VCD_defs(num);
  num = INST_mhV_3.dump_VCD_defs(num);
  num = INST_mhV_4.dump_VCD_defs(num);
  num = INST_mhV_5.dump_VCD_defs(num);
  num = INST_msgF.dump_VCD_defs(num);
  num = INST_readAddr.dump_VCD_defs(num);
  num = INST_writeAddr.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMHReciever::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMHReciever &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMHReciever::vcd_defs(tVCDDumpType dt, MOD_mkMHReciever &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_moveMessage) != DEF_CAN_FIRE_RL_moveMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_moveMessage, 1u);
	backing.DEF_CAN_FIRE_RL_moveMessage = DEF_CAN_FIRE_RL_moveMessage;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rcvHeader) != DEF_CAN_FIRE_RL_rcvHeader)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rcvHeader, 1u);
	backing.DEF_CAN_FIRE_RL_rcvHeader = DEF_CAN_FIRE_RL_rcvHeader;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_sink_put) != DEF_CAN_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_sink_put, 1u);
	backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_src_get) != DEF_CAN_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_src_get, 1u);
	backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_moveMessage) != DEF_WILL_FIRE_RL_moveMessage)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_moveMessage, 1u);
	backing.DEF_WILL_FIRE_RL_moveMessage = DEF_WILL_FIRE_RL_moveMessage;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rcvHeader) != DEF_WILL_FIRE_RL_rcvHeader)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rcvHeader, 1u);
	backing.DEF_WILL_FIRE_RL_rcvHeader = DEF_WILL_FIRE_RL_rcvHeader;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_sink_put) != DEF_WILL_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_sink_put, 1u);
	backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_src_get) != DEF_WILL_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_src_get, 1u);
	backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      }
      ++num;
      if ((backing.DEF_mesgInF_first____d41) != DEF_mesgInF_first____d41)
      {
	vcd_write_val(sim_hdl, num, DEF_mesgInF_first____d41, 33u);
	backing.DEF_mesgInF_first____d41 = DEF_mesgInF_first____d41;
      }
      ++num;
      if ((backing.PORT_EN_sink_put) != PORT_EN_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_sink_put, 1u);
	backing.PORT_EN_sink_put = PORT_EN_sink_put;
      }
      ++num;
      if ((backing.PORT_EN_src_get) != PORT_EN_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_src_get, 1u);
	backing.PORT_EN_src_get = PORT_EN_src_get;
      }
      ++num;
      if ((backing.PORT_RDY_sink_put) != PORT_RDY_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_sink_put, 1u);
	backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      }
      ++num;
      if ((backing.PORT_RDY_src_get) != PORT_RDY_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_src_get, 1u);
	backing.PORT_RDY_src_get = PORT_RDY_src_get;
      }
      ++num;
      if ((backing.PORT_sink_put) != PORT_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_sink_put, 33u);
	backing.PORT_sink_put = PORT_sink_put;
      }
      ++num;
      if ((backing.PORT_src_get) != PORT_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_src_get, 33u);
	backing.PORT_src_get = PORT_src_get;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_moveMessage, 1u);
      backing.DEF_CAN_FIRE_RL_moveMessage = DEF_CAN_FIRE_RL_moveMessage;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rcvHeader, 1u);
      backing.DEF_CAN_FIRE_RL_rcvHeader = DEF_CAN_FIRE_RL_rcvHeader;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_sink_put, 1u);
      backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_src_get, 1u);
      backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_moveMessage, 1u);
      backing.DEF_WILL_FIRE_RL_moveMessage = DEF_WILL_FIRE_RL_moveMessage;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rcvHeader, 1u);
      backing.DEF_WILL_FIRE_RL_rcvHeader = DEF_WILL_FIRE_RL_rcvHeader;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_sink_put, 1u);
      backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_src_get, 1u);
      backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, DEF_mesgInF_first____d41, 33u);
      backing.DEF_mesgInF_first____d41 = DEF_mesgInF_first____d41;
      vcd_write_val(sim_hdl, num++, PORT_EN_sink_put, 1u);
      backing.PORT_EN_sink_put = PORT_EN_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_src_get, 1u);
      backing.PORT_EN_src_get = PORT_EN_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_sink_put, 1u);
      backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_src_get, 1u);
      backing.PORT_RDY_src_get = PORT_RDY_src_get;
      vcd_write_val(sim_hdl, num++, PORT_sink_put, 33u);
      backing.PORT_sink_put = PORT_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_src_get, 33u);
      backing.PORT_src_get = PORT_src_get;
    }
}

void MOD_mkMHReciever::vcd_prims(tVCDDumpType dt, MOD_mkMHReciever &backing)
{
  INST_countRd.dump_VCD(dt, backing.INST_countRd);
  INST_countRdReq.dump_VCD(dt, backing.INST_countRdReq);
  INST_countWrd.dump_VCD(dt, backing.INST_countWrd);
  INST_endHead.dump_VCD(dt, backing.INST_endHead);
  INST_hp.dump_VCD(dt, backing.INST_hp);
  INST_length.dump_VCD(dt, backing.INST_length);
  INST_mesgInF.dump_VCD(dt, backing.INST_mesgInF);
  INST_mesgOutF.dump_VCD(dt, backing.INST_mesgOutF);
  INST_messageF.dump_VCD(dt, backing.INST_messageF);
  INST_mhV.dump_VCD(dt, backing.INST_mhV);
  INST_mhV_1.dump_VCD(dt, backing.INST_mhV_1);
  INST_mhV_2.dump_VCD(dt, backing.INST_mhV_2);
  INST_mhV_3.dump_VCD(dt, backing.INST_mhV_3);
  INST_mhV_4.dump_VCD(dt, backing.INST_mhV_4);
  INST_mhV_5.dump_VCD(dt, backing.INST_mhV_5);
  INST_msgF.dump_VCD(dt, backing.INST_msgF);
  INST_readAddr.dump_VCD(dt, backing.INST_readAddr);
  INST_writeAddr.dump_VCD(dt, backing.INST_writeAddr);
}
