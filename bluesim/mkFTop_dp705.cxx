/*
 * Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
 * 
 * On Tue Oct 16 15:37:58 EDT 2012
 * 
 */
#include "bluesim_primitives.h"
#include "mkFTop_dp705.h"


/* Constructor */
MOD_mkFTop_dp705::MOD_mkFTop_dp705(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_buf1(simHdl, "buf1", this),
    INST_chk(simHdl, "chk", this),
    INST_cycleCounter(simHdl, "cycleCounter", this, 32u, 0u, (tUInt8)0u),
    INST_fhrcv(simHdl, "fhrcv", this),
    INST_fhsnd(simHdl, "fhsnd", this),
    INST_gen1(simHdl, "gen1", this),
    INST_gen2(simHdl, "gen2", this),
    INST_length(simHdl, "length", this, 9u, 0u, (tUInt8)0u),
    INST_mhrcv(simHdl, "mhrcv", this),
    INST_mhsnd(simHdl, "mhsnd", this),
    INST_rstndb(simHdl, "rstndb", this, 15u, (tUInt8)1u),
    INST_s2rF(simHdl, "s2rF", this, 33u, 2u, 1u, 0u),
    PORT_rstndb$OUT_RST((tUInt8)1u),
    PORT_RST_N((tUInt8)1u)
{
  INST_rstndb.set_reset_fn_gen_rst(&static_reset_rstndb$OUT_RST);
  symbol_count = 45u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFTop_dp705::init_symbols_0()
{
  init_symbol(&symbols[0u], "buf1", SYM_MODULE, &INST_buf1);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_cnctDwm", SYM_DEF, &DEF_CAN_FIRE_RL_cnctDwm, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_cycleCount", SYM_DEF, &DEF_CAN_FIRE_RL_cycleCount, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_gobble", SYM_DEF, &DEF_CAN_FIRE_RL_gobble, 1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_mkConnectionGetPut",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_mkConnectionGetPut_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_1,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_mkConnectionGetPut_2",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_2,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_RL_mkConnectionGetPut_3",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_3,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_mkConnectionGetPut_4",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_4,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_RL_mkConnectionGetPut_5",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_5,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_RL_mkConnectionGetPut_6",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_6,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_RL_mkConnectionGetPut_7",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_mkConnectionGetPut_7,
	      1u);
  init_symbol(&symbols[12u], "chk", SYM_MODULE, &INST_chk);
  init_symbol(&symbols[13u], "cycleCounter", SYM_MODULE, &INST_cycleCounter);
  init_symbol(&symbols[14u], "fhrcv", SYM_MODULE, &INST_fhrcv);
  init_symbol(&symbols[15u], "fhsnd", SYM_MODULE, &INST_fhsnd);
  init_symbol(&symbols[16u], "gen1", SYM_MODULE, &INST_gen1);
  init_symbol(&symbols[17u], "gen2", SYM_MODULE, &INST_gen2);
  init_symbol(&symbols[18u], "length", SYM_MODULE, &INST_length);
  init_symbol(&symbols[19u], "mhrcv", SYM_MODULE, &INST_mhrcv);
  init_symbol(&symbols[20u], "mhsnd", SYM_MODULE, &INST_mhsnd);
  init_symbol(&symbols[21u], "RL_cnctDwm", SYM_RULE);
  init_symbol(&symbols[22u], "RL_cycleCount", SYM_RULE);
  init_symbol(&symbols[23u], "RL_gobble", SYM_RULE);
  init_symbol(&symbols[24u], "RL_mkConnectionGetPut", SYM_RULE);
  init_symbol(&symbols[25u], "RL_mkConnectionGetPut_1", SYM_RULE);
  init_symbol(&symbols[26u], "RL_mkConnectionGetPut_2", SYM_RULE);
  init_symbol(&symbols[27u], "RL_mkConnectionGetPut_3", SYM_RULE);
  init_symbol(&symbols[28u], "RL_mkConnectionGetPut_4", SYM_RULE);
  init_symbol(&symbols[29u], "RL_mkConnectionGetPut_5", SYM_RULE);
  init_symbol(&symbols[30u], "RL_mkConnectionGetPut_6", SYM_RULE);
  init_symbol(&symbols[31u], "RL_mkConnectionGetPut_7", SYM_RULE);
  init_symbol(&symbols[32u], "rstndb", SYM_MODULE, &INST_rstndb);
  init_symbol(&symbols[33u], "s2rF", SYM_MODULE, &INST_s2rF);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_cnctDwm", SYM_DEF, &DEF_WILL_FIRE_RL_cnctDwm, 1u);
  init_symbol(&symbols[35u], "WILL_FIRE_RL_cycleCount", SYM_DEF, &DEF_WILL_FIRE_RL_cycleCount, 1u);
  init_symbol(&symbols[36u], "WILL_FIRE_RL_gobble", SYM_DEF, &DEF_WILL_FIRE_RL_gobble, 1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_mkConnectionGetPut",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_mkConnectionGetPut_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_1,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_mkConnectionGetPut_2",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_2,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_mkConnectionGetPut_3",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_3,
	      1u);
  init_symbol(&symbols[41u],
	      "WILL_FIRE_RL_mkConnectionGetPut_4",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_4,
	      1u);
  init_symbol(&symbols[42u],
	      "WILL_FIRE_RL_mkConnectionGetPut_5",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_5,
	      1u);
  init_symbol(&symbols[43u],
	      "WILL_FIRE_RL_mkConnectionGetPut_6",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_6,
	      1u);
  init_symbol(&symbols[44u],
	      "WILL_FIRE_RL_mkConnectionGetPut_7",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mkConnectionGetPut_7,
	      1u);
}


/* Rule actions */

void MOD_mkFTop_dp705::RL_cycleCount()
{
  tUInt32 DEF_x__h867;
  DEF__read__h659 = INST_cycleCounter.METH_read();
  DEF_x__h867 = DEF__read__h659 + 1u;
  INST_cycleCounter.METH_write(DEF_x__h867);
}

void MOD_mkFTop_dp705::RL_gobble()
{
  tUInt8 DEF_cycleCounter_EQ_18000___d3;
  DEF__read__h659 = INST_cycleCounter.METH_read();
  DEF_cycleCounter_EQ_18000___d3 = DEF__read__h659 == 18000u;
  if (!(PORT_rstndb$OUT_RST == (tUInt8)0u))
    if (DEF_cycleCounter_EQ_18000___d3)
      dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut()
{
  tUInt64 DEF_gen1_src_get___d39;
  tUInt64 DEF_AVMeth_gen1_src_get;
  DEF_AVMeth_gen1_src_get = INST_gen1.METH_src_get();
  DEF_gen1_src_get___d39 = DEF_AVMeth_gen1_src_get;
  INST_buf1.METH_sink_put(DEF_gen1_src_get___d39);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_1()
{
  tUInt32 DEF_buf1_newLen_get___d11;
  tUInt32 DEF_AVMeth_buf1_newLen_get;
  DEF_AVMeth_buf1_newLen_get = INST_buf1.METH_newLen_get();
  DEF_buf1_newLen_get___d11 = DEF_AVMeth_buf1_newLen_get;
  INST_mhsnd.METH_newLen_put(DEF_buf1_newLen_get___d11);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_2()
{
  tUInt64 DEF_buf1_src_get___d40;
  tUInt64 DEF_AVMeth_buf1_src_get;
  DEF_AVMeth_buf1_src_get = INST_buf1.METH_src_get();
  DEF_buf1_src_get___d40 = DEF_AVMeth_buf1_src_get;
  INST_mhsnd.METH_sink_put(DEF_buf1_src_get___d40);
}

void MOD_mkFTop_dp705::RL_cnctDwm()
{
  INST_buf1.METH_length_dwm();
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_3()
{
  tUInt64 DEF_mhsnd_src_get___d41;
  tUInt64 DEF_AVMeth_mhsnd_src_get;
  DEF_AVMeth_mhsnd_src_get = INST_mhsnd.METH_src_get();
  DEF_mhsnd_src_get___d41 = DEF_AVMeth_mhsnd_src_get;
  INST_fhsnd.METH_ingress_put(DEF_mhsnd_src_get___d41);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_4()
{
  tUInt64 DEF_fhsnd_egress_get___d42;
  tUInt64 DEF_AVMeth_fhsnd_egress_get;
  DEF_AVMeth_fhsnd_egress_get = INST_fhsnd.METH_egress_get();
  DEF_fhsnd_egress_get___d42 = DEF_AVMeth_fhsnd_egress_get;
  INST_fhrcv.METH_ingress_put(DEF_fhsnd_egress_get___d42);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_5()
{
  tUInt64 DEF_fhrcv_egress_get___d43;
  tUInt64 DEF_AVMeth_fhrcv_egress_get;
  DEF_AVMeth_fhrcv_egress_get = INST_fhrcv.METH_egress_get();
  DEF_fhrcv_egress_get___d43 = DEF_AVMeth_fhrcv_egress_get;
  INST_mhrcv.METH_ingress_put(DEF_fhrcv_egress_get___d43);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_6()
{
  tUInt64 DEF_mhrcv_egress_get___d44;
  tUInt64 DEF_AVMeth_mhrcv_egress_get;
  DEF_AVMeth_mhrcv_egress_get = INST_mhrcv.METH_egress_get();
  DEF_mhrcv_egress_get___d44 = DEF_AVMeth_mhrcv_egress_get;
  INST_chk.METH_sink1_put(DEF_mhrcv_egress_get___d44);
}

void MOD_mkFTop_dp705::RL_mkConnectionGetPut_7()
{
  tUInt64 DEF_gen2_src_get___d45;
  tUInt64 DEF_AVMeth_gen2_src_get;
  DEF_AVMeth_gen2_src_get = INST_gen2.METH_src_get();
  DEF_gen2_src_get___d45 = DEF_AVMeth_gen2_src_get;
  INST_chk.METH_sink2_put(DEF_gen2_src_get___d45);
}


/* Methods */


/* Reset routines */

void MOD_mkFTop_dp705::reset_rstndb$OUT_RST(tUInt8 ARG_rst_in)
{
  PORT_rstndb$OUT_RST = ARG_rst_in;
  INST_s2rF.reset_RST(ARG_rst_in);
  INST_mhsnd.reset_RST_N(ARG_rst_in);
  INST_mhrcv.reset_RST_N(ARG_rst_in);
  INST_length.reset_RST(ARG_rst_in);
  INST_gen2.reset_RST_N(ARG_rst_in);
  INST_gen1.reset_RST_N(ARG_rst_in);
  INST_fhsnd.reset_RST_N(ARG_rst_in);
  INST_fhrcv.reset_RST_N(ARG_rst_in);
  INST_cycleCounter.reset_RST(ARG_rst_in);
  INST_chk.reset_RST_N(ARG_rst_in);
  INST_buf1.reset_RST_N(ARG_rst_in);
}

void MOD_mkFTop_dp705::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rstndb.reset_IN_RST(ARG_rst_in);
}


/* Static handles to reset routines */

void MOD_mkFTop_dp705::static_reset_rstndb$OUT_RST(void *my_this, tUInt8 ARG_rst_in)
{
  (((MOD_mkFTop_dp705 *)(my_this))->reset_rstndb$OUT_RST)(ARG_rst_in);
}


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFTop_dp705::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFTop_dp705::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_buf1.dump_state(indent + 2u);
  INST_chk.dump_state(indent + 2u);
  INST_cycleCounter.dump_state(indent + 2u);
  INST_fhrcv.dump_state(indent + 2u);
  INST_fhsnd.dump_state(indent + 2u);
  INST_gen1.dump_state(indent + 2u);
  INST_gen2.dump_state(indent + 2u);
  INST_length.dump_state(indent + 2u);
  INST_mhrcv.dump_state(indent + 2u);
  INST_mhsnd.dump_state(indent + 2u);
  INST_rstndb.dump_state(indent + 2u);
  INST_s2rF.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFTop_dp705::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 29u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_cnctDwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_cycleCount", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gobble", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mkConnectionGetPut_7", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_cnctDwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_cycleCount", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gobble", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mkConnectionGetPut_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h659", 32u);
  vcd_write_def(sim_hdl, num++, "rstndb$OUT_RST", 1u);
  num = INST_cycleCounter.dump_VCD_defs(num);
  num = INST_length.dump_VCD_defs(num);
  num = INST_rstndb.dump_VCD_defs(num);
  num = INST_s2rF.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_buf1.dump_VCD_defs(l);
    num = INST_chk.dump_VCD_defs(l);
    num = INST_fhrcv.dump_VCD_defs(l);
    num = INST_fhsnd.dump_VCD_defs(l);
    num = INST_gen1.dump_VCD_defs(l);
    num = INST_gen2.dump_VCD_defs(l);
    num = INST_mhrcv.dump_VCD_defs(l);
    num = INST_mhsnd.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFTop_dp705::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFTop_dp705 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFTop_dp705::vcd_defs(tVCDDumpType dt, MOD_mkFTop_dp705 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_cnctDwm) != DEF_CAN_FIRE_RL_cnctDwm)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_cnctDwm, 1u);
	backing.DEF_CAN_FIRE_RL_cnctDwm = DEF_CAN_FIRE_RL_cnctDwm;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_cycleCount) != DEF_CAN_FIRE_RL_cycleCount)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_cycleCount, 1u);
	backing.DEF_CAN_FIRE_RL_cycleCount = DEF_CAN_FIRE_RL_cycleCount;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gobble) != DEF_CAN_FIRE_RL_gobble)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gobble, 1u);
	backing.DEF_CAN_FIRE_RL_gobble = DEF_CAN_FIRE_RL_gobble;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut) != DEF_CAN_FIRE_RL_mkConnectionGetPut)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut = DEF_CAN_FIRE_RL_mkConnectionGetPut;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1) != DEF_CAN_FIRE_RL_mkConnectionGetPut_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_1, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1 = DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2) != DEF_CAN_FIRE_RL_mkConnectionGetPut_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_2, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2 = DEF_CAN_FIRE_RL_mkConnectionGetPut_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3) != DEF_CAN_FIRE_RL_mkConnectionGetPut_3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_3, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3 = DEF_CAN_FIRE_RL_mkConnectionGetPut_3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_4) != DEF_CAN_FIRE_RL_mkConnectionGetPut_4)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_4, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_4 = DEF_CAN_FIRE_RL_mkConnectionGetPut_4;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_5) != DEF_CAN_FIRE_RL_mkConnectionGetPut_5)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_5, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_5 = DEF_CAN_FIRE_RL_mkConnectionGetPut_5;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_6) != DEF_CAN_FIRE_RL_mkConnectionGetPut_6)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_6, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_6 = DEF_CAN_FIRE_RL_mkConnectionGetPut_6;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_7) != DEF_CAN_FIRE_RL_mkConnectionGetPut_7)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mkConnectionGetPut_7, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_7 = DEF_CAN_FIRE_RL_mkConnectionGetPut_7;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_cnctDwm) != DEF_WILL_FIRE_RL_cnctDwm)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_cnctDwm, 1u);
	backing.DEF_WILL_FIRE_RL_cnctDwm = DEF_WILL_FIRE_RL_cnctDwm;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_cycleCount) != DEF_WILL_FIRE_RL_cycleCount)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_cycleCount, 1u);
	backing.DEF_WILL_FIRE_RL_cycleCount = DEF_WILL_FIRE_RL_cycleCount;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gobble) != DEF_WILL_FIRE_RL_gobble)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gobble, 1u);
	backing.DEF_WILL_FIRE_RL_gobble = DEF_WILL_FIRE_RL_gobble;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut) != DEF_WILL_FIRE_RL_mkConnectionGetPut)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut = DEF_WILL_FIRE_RL_mkConnectionGetPut;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1) != DEF_WILL_FIRE_RL_mkConnectionGetPut_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_1, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1 = DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2) != DEF_WILL_FIRE_RL_mkConnectionGetPut_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_2, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2 = DEF_WILL_FIRE_RL_mkConnectionGetPut_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3) != DEF_WILL_FIRE_RL_mkConnectionGetPut_3)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_3, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3 = DEF_WILL_FIRE_RL_mkConnectionGetPut_3;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_4) != DEF_WILL_FIRE_RL_mkConnectionGetPut_4)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_4, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_4 = DEF_WILL_FIRE_RL_mkConnectionGetPut_4;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_5) != DEF_WILL_FIRE_RL_mkConnectionGetPut_5)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_5, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_5 = DEF_WILL_FIRE_RL_mkConnectionGetPut_5;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_6) != DEF_WILL_FIRE_RL_mkConnectionGetPut_6)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_6, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_6 = DEF_WILL_FIRE_RL_mkConnectionGetPut_6;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_7) != DEF_WILL_FIRE_RL_mkConnectionGetPut_7)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mkConnectionGetPut_7, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_7 = DEF_WILL_FIRE_RL_mkConnectionGetPut_7;
      }
      ++num;
      if ((backing.DEF__read__h659) != DEF__read__h659)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h659, 32u);
	backing.DEF__read__h659 = DEF__read__h659;
      }
      ++num;
      if ((backing.PORT_rstndb$OUT_RST) != PORT_rstndb$OUT_RST)
      {
	vcd_write_val(sim_hdl, num, PORT_rstndb$OUT_RST, 1u);
	backing.PORT_rstndb$OUT_RST = PORT_rstndb$OUT_RST;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_cnctDwm, 1u);
      backing.DEF_CAN_FIRE_RL_cnctDwm = DEF_CAN_FIRE_RL_cnctDwm;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_cycleCount, 1u);
      backing.DEF_CAN_FIRE_RL_cycleCount = DEF_CAN_FIRE_RL_cycleCount;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gobble, 1u);
      backing.DEF_CAN_FIRE_RL_gobble = DEF_CAN_FIRE_RL_gobble;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut = DEF_CAN_FIRE_RL_mkConnectionGetPut;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_1, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1 = DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_2, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2 = DEF_CAN_FIRE_RL_mkConnectionGetPut_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_3, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3 = DEF_CAN_FIRE_RL_mkConnectionGetPut_3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_4, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_4 = DEF_CAN_FIRE_RL_mkConnectionGetPut_4;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_5, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_5 = DEF_CAN_FIRE_RL_mkConnectionGetPut_5;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_6, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_6 = DEF_CAN_FIRE_RL_mkConnectionGetPut_6;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_7, 1u);
      backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_7 = DEF_CAN_FIRE_RL_mkConnectionGetPut_7;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_cnctDwm, 1u);
      backing.DEF_WILL_FIRE_RL_cnctDwm = DEF_WILL_FIRE_RL_cnctDwm;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_cycleCount, 1u);
      backing.DEF_WILL_FIRE_RL_cycleCount = DEF_WILL_FIRE_RL_cycleCount;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gobble, 1u);
      backing.DEF_WILL_FIRE_RL_gobble = DEF_WILL_FIRE_RL_gobble;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut = DEF_WILL_FIRE_RL_mkConnectionGetPut;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_1, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1 = DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_2, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2 = DEF_WILL_FIRE_RL_mkConnectionGetPut_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_3, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3 = DEF_WILL_FIRE_RL_mkConnectionGetPut_3;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_4, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_4 = DEF_WILL_FIRE_RL_mkConnectionGetPut_4;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_5, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_5 = DEF_WILL_FIRE_RL_mkConnectionGetPut_5;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_6, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_6 = DEF_WILL_FIRE_RL_mkConnectionGetPut_6;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_7, 1u);
      backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_7 = DEF_WILL_FIRE_RL_mkConnectionGetPut_7;
      vcd_write_val(sim_hdl, num++, DEF__read__h659, 32u);
      backing.DEF__read__h659 = DEF__read__h659;
      vcd_write_val(sim_hdl, num++, PORT_rstndb$OUT_RST, 1u);
      backing.PORT_rstndb$OUT_RST = PORT_rstndb$OUT_RST;
    }
}

void MOD_mkFTop_dp705::vcd_prims(tVCDDumpType dt, MOD_mkFTop_dp705 &backing)
{
  INST_cycleCounter.dump_VCD(dt, backing.INST_cycleCounter);
  INST_length.dump_VCD(dt, backing.INST_length);
  INST_rstndb.dump_VCD(dt, backing.INST_rstndb);
  INST_s2rF.dump_VCD(dt, backing.INST_s2rF);
}

void MOD_mkFTop_dp705::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkFTop_dp705 &backing)
{
  INST_buf1.dump_VCD(dt, levels, backing.INST_buf1);
  INST_chk.dump_VCD(dt, levels, backing.INST_chk);
  INST_fhrcv.dump_VCD(dt, levels, backing.INST_fhrcv);
  INST_fhsnd.dump_VCD(dt, levels, backing.INST_fhsnd);
  INST_gen1.dump_VCD(dt, levels, backing.INST_gen1);
  INST_gen2.dump_VCD(dt, levels, backing.INST_gen2);
  INST_mhrcv.dump_VCD(dt, levels, backing.INST_mhrcv);
  INST_mhsnd.dump_VCD(dt, levels, backing.INST_mhsnd);
}
