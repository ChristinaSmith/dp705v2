/*
 * Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
 * 
 * On Tue Oct 16 15:37:58 EDT 2012
 * 
 */
#include "bluesim_primitives.h"
#include "mkMHSender.h"


/* Constructor */
MOD_mkMHSender::MOD_mkMHSender(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_eopR(simHdl, "eopR", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_eopR_1(simHdl, "eopR_1", this, 1u, (tUInt8)0u),
    INST_fragLenCnt(simHdl, "fragLenCnt", this, 9u, 1u, (tUInt8)0u),
    INST_headerF(simHdl, "headerF", this, 0u, 2u, 1u, 0u),
    INST_hp(simHdl, "hp", this, 9u, 0u, (tUInt8)0u),
    INST_lenR(simHdl, "lenR", this, 10u, 170u, (tUInt8)0u),
    INST_lenToFHF(simHdl, "lenToFHF", this, 9u, 2u, 1u, 0u),
    INST_lengthF(simHdl, "lengthF", this, 9u, 2u, 1u, 0u),
    INST_mesgInF(simHdl, "mesgInF", this, 33u, 2u, 1u, 0u),
    INST_mesgOutF(simHdl, "mesgOutF", this, 33u, 2u, 1u, 0u),
    INST_messageF(simHdl, "messageF", this, 0u, 2u, 1u, 0u),
    INST_mhV(simHdl, "mhV", this, 33u),
    INST_mhV_1(simHdl, "mhV_1", this, 33u),
    INST_mhV_2(simHdl, "mhV_2", this, 33u),
    INST_mhV_3(simHdl, "mhV_3", this, 33u),
    INST_mhV_4(simHdl, "mhV_4", this, 33u),
    INST_mhV_5(simHdl, "mhV_5", this, 33u),
    INST_msgDoneF(simHdl, "msgDoneF", this, 0u, 2u, 1u, 0u),
    INST_msgHeadLen(simHdl, "msgHeadLen", this, 9u, 5u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_src_get = false;
  PORT_EN_sink_put = false;
  PORT_EN_newLen_put = false;
  PORT_EN_giveLen_get = false;
  PORT_sink_put = 0llu;
  PORT_newLen_put = 0u;
  PORT_src_get = 0llu;
  PORT_RDY_src_get = false;
  PORT_RDY_sink_put = false;
  PORT_RDY_newLen_put = false;
  PORT_getLen_dwm = false;
  PORT_RDY_getLen_dwm = false;
  PORT_giveLen_get = 0u;
  PORT_RDY_giveLen_get = false;
  symbol_count = 56u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMHSender::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h2254", SYM_DEF, &DEF_b__h2254, 9u);
  init_symbol(&symbols[1u], "b__h2614", SYM_DEF, &DEF_b__h2614, 9u);
  init_symbol(&symbols[2u], "CAN_FIRE_getLen_dwm", SYM_DEF, &DEF_CAN_FIRE_getLen_dwm, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_giveLen_get", SYM_DEF, &DEF_CAN_FIRE_giveLen_get, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_newLen_put", SYM_DEF, &DEF_CAN_FIRE_newLen_put, 1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_eopR__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_eopR__dreg_update,
	      1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_popMhV", SYM_DEF, &DEF_CAN_FIRE_RL_popMhV, 1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_sndHead", SYM_DEF, &DEF_CAN_FIRE_RL_sndHead, 1u);
  init_symbol(&symbols[8u], "CAN_FIRE_RL_sndMesg", SYM_DEF, &DEF_CAN_FIRE_RL_sndMesg, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE_sink_put", SYM_DEF, &DEF_CAN_FIRE_sink_put, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE_src_get", SYM_DEF, &DEF_CAN_FIRE_src_get, 1u);
  init_symbol(&symbols[11u], "EN_giveLen_get", SYM_PORT, &PORT_EN_giveLen_get, 1u);
  init_symbol(&symbols[12u], "EN_newLen_put", SYM_PORT, &PORT_EN_newLen_put, 1u);
  init_symbol(&symbols[13u], "EN_sink_put", SYM_PORT, &PORT_EN_sink_put, 1u);
  init_symbol(&symbols[14u], "EN_src_get", SYM_PORT, &PORT_EN_src_get, 1u);
  init_symbol(&symbols[15u], "eopR", SYM_MODULE, &INST_eopR);
  init_symbol(&symbols[16u], "eopR_1", SYM_MODULE, &INST_eopR_1);
  init_symbol(&symbols[17u], "fragLenCnt", SYM_MODULE, &INST_fragLenCnt);
  init_symbol(&symbols[18u], "getLen_dwm", SYM_PORT, &PORT_getLen_dwm, 1u);
  init_symbol(&symbols[19u], "giveLen_get", SYM_PORT, &PORT_giveLen_get, 9u);
  init_symbol(&symbols[20u], "headerF", SYM_MODULE, &INST_headerF);
  init_symbol(&symbols[21u], "hp", SYM_MODULE, &INST_hp);
  init_symbol(&symbols[22u], "lengthF", SYM_MODULE, &INST_lengthF);
  init_symbol(&symbols[23u], "lenR", SYM_MODULE, &INST_lenR);
  init_symbol(&symbols[24u], "lenToFHF", SYM_MODULE, &INST_lenToFHF);
  init_symbol(&symbols[25u], "mesgInF", SYM_MODULE, &INST_mesgInF);
  init_symbol(&symbols[26u], "mesgOutF", SYM_MODULE, &INST_mesgOutF);
  init_symbol(&symbols[27u], "messageF", SYM_MODULE, &INST_messageF);
  init_symbol(&symbols[28u], "mhV", SYM_MODULE, &INST_mhV);
  init_symbol(&symbols[29u], "mhV_1", SYM_MODULE, &INST_mhV_1);
  init_symbol(&symbols[30u], "mhV_2", SYM_MODULE, &INST_mhV_2);
  init_symbol(&symbols[31u], "mhV_3", SYM_MODULE, &INST_mhV_3);
  init_symbol(&symbols[32u], "mhV_4", SYM_MODULE, &INST_mhV_4);
  init_symbol(&symbols[33u], "mhV_5", SYM_MODULE, &INST_mhV_5);
  init_symbol(&symbols[34u], "msgDoneF", SYM_MODULE, &INST_msgDoneF);
  init_symbol(&symbols[35u], "msgHeadLen", SYM_MODULE, &INST_msgHeadLen);
  init_symbol(&symbols[36u], "newLen_put", SYM_PORT, &PORT_newLen_put, 9u);
  init_symbol(&symbols[37u], "RDY_getLen_dwm", SYM_PORT, &PORT_RDY_getLen_dwm, 1u);
  init_symbol(&symbols[38u], "RDY_giveLen_get", SYM_PORT, &PORT_RDY_giveLen_get, 1u);
  init_symbol(&symbols[39u], "RDY_newLen_put", SYM_PORT, &PORT_RDY_newLen_put, 1u);
  init_symbol(&symbols[40u], "RDY_sink_put", SYM_PORT, &PORT_RDY_sink_put, 1u);
  init_symbol(&symbols[41u], "RDY_src_get", SYM_PORT, &PORT_RDY_src_get, 1u);
  init_symbol(&symbols[42u], "RL_eopR__dreg_update", SYM_RULE);
  init_symbol(&symbols[43u], "RL_popMhV", SYM_RULE);
  init_symbol(&symbols[44u], "RL_sndHead", SYM_RULE);
  init_symbol(&symbols[45u], "RL_sndMesg", SYM_RULE);
  init_symbol(&symbols[46u], "sink_put", SYM_PORT, &PORT_sink_put, 33u);
  init_symbol(&symbols[47u], "src_get", SYM_PORT, &PORT_src_get, 33u);
  init_symbol(&symbols[48u], "WILL_FIRE_giveLen_get", SYM_DEF, &DEF_WILL_FIRE_giveLen_get, 1u);
  init_symbol(&symbols[49u], "WILL_FIRE_newLen_put", SYM_DEF, &DEF_WILL_FIRE_newLen_put, 1u);
  init_symbol(&symbols[50u],
	      "WILL_FIRE_RL_eopR__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_eopR__dreg_update,
	      1u);
  init_symbol(&symbols[51u], "WILL_FIRE_RL_popMhV", SYM_DEF, &DEF_WILL_FIRE_RL_popMhV, 1u);
  init_symbol(&symbols[52u], "WILL_FIRE_RL_sndHead", SYM_DEF, &DEF_WILL_FIRE_RL_sndHead, 1u);
  init_symbol(&symbols[53u], "WILL_FIRE_RL_sndMesg", SYM_DEF, &DEF_WILL_FIRE_RL_sndMesg, 1u);
  init_symbol(&symbols[54u], "WILL_FIRE_sink_put", SYM_DEF, &DEF_WILL_FIRE_sink_put, 1u);
  init_symbol(&symbols[55u], "WILL_FIRE_src_get", SYM_DEF, &DEF_WILL_FIRE_src_get, 1u);
}


/* Rule actions */

void MOD_mkMHSender::RL_eopR__dreg_update()
{
  tUInt8 DEF_eopR_1_whas_AND_eopR_1_wget___d3;
  DEF_eopR_1_whas_AND_eopR_1_wget___d3 = INST_eopR_1.METH_whas() && INST_eopR_1.METH_wget();
  INST_eopR.METH_write(DEF_eopR_1_whas_AND_eopR_1_wget___d3);
}

void MOD_mkMHSender::RL_popMhV()
{
  tUInt64 DEF_IF_lengthF_first_EQ_0_0_THEN_128_ELSE_0_1_CONC_ETC___d12;
  tUInt32 DEF_lengthF_first____d63;
  DEF_lengthF_first____d63 = INST_lengthF.METH_first();
  DEF_IF_lengthF_first_EQ_0_0_THEN_128_ELSE_0_1_CONC_ETC___d12 = 8589934591llu & (((((tUInt64)(DEF_lengthF_first____d63 == 0u ? (tUInt8)128u : (tUInt8)0u)) << 25u) | (((tUInt64)(DEF_lengthF_first____d63)) << 16u)) | (tUInt64)(0u));
  INST_mhV.METH_write(0llu);
  INST_mhV_1.METH_write(1llu);
  INST_mhV_2.METH_write(2llu);
  INST_mhV_3.METH_write(3llu);
  INST_mhV_4.METH_write(4llu);
  INST_mhV_5.METH_write(DEF_IF_lengthF_first_EQ_0_0_THEN_128_ELSE_0_1_CONC_ETC___d12);
  INST_lengthF.METH_deq();
  INST_headerF.METH_enq();
}

void MOD_mkMHSender::RL_sndHead()
{
  tUInt32 DEF_IF_hp_4_EQ_msgHeadLen_5_6_THEN_0_ELSE_hp_4_PLU_ETC___d49;
  tUInt8 DEF_hp_4_EQ_5___d65;
  tUInt64 DEF_IF_hp_4_EQ_0_5_THEN_mhV_6_ELSE_IF_hp_4_EQ_1_7__ETC___d47;
  tUInt32 DEF_mhV_5_7_BITS_31_TO_0___d74;
  tUInt64 DEF_mhV_5___d72;
  tUInt8 DEF_NOT_hp_4_EQ_5_5___d36;
  DEF_b__h2254 = INST_hp.METH_read();
  DEF_mhV_5___d72 = INST_mhV_5.METH_read();
  DEF_b__h2614 = INST_msgHeadLen.METH_read();
  DEF_mhV_5_7_BITS_31_TO_0___d74 = (tUInt32)(DEF_mhV_5___d72);
  DEF_hp_4_EQ_5___d65 = DEF_b__h2254 == 5u;
  DEF_NOT_hp_4_EQ_5_5___d36 = !DEF_hp_4_EQ_5___d65;
  DEF_IF_hp_4_EQ_0_5_THEN_mhV_6_ELSE_IF_hp_4_EQ_1_7__ETC___d47 = DEF_b__h2254 == 0u ? INST_mhV.METH_read() : (DEF_b__h2254 == 1u ? INST_mhV_1.METH_read() : (DEF_b__h2254 == 2u ? INST_mhV_2.METH_read() : (DEF_b__h2254 == 3u ? INST_mhV_3.METH_read() : (DEF_b__h2254 == 4u ? INST_mhV_4.METH_read() : 8589934591llu & ((((tUInt64)(DEF_NOT_hp_4_EQ_5_5___d36 || (tUInt8)(DEF_mhV_5___d72 >> 32u))) << 32u) | (tUInt64)(DEF_hp_4_EQ_5___d65 ? DEF_mhV_5_7_BITS_31_TO_0___d74 : DEF_mhV_5_7_BITS_31_TO_0___d74))))));
  DEF_hp_4_EQ_msgHeadLen_5___d73 = DEF_b__h2254 == DEF_b__h2614;
  DEF_IF_hp_4_EQ_msgHeadLen_5_6_THEN_0_ELSE_hp_4_PLU_ETC___d49 = DEF_hp_4_EQ_msgHeadLen_5___d73 ? 0u : 511u & (DEF_b__h2254 + 1u);
  INST_mesgOutF.METH_enq(DEF_IF_hp_4_EQ_0_5_THEN_mhV_6_ELSE_IF_hp_4_EQ_1_7__ETC___d47);
  INST_hp.METH_write(DEF_IF_hp_4_EQ_msgHeadLen_5_6_THEN_0_ELSE_hp_4_PLU_ETC___d49);
  if (DEF_hp_4_EQ_msgHeadLen_5___d73)
    INST_headerF.METH_deq();
  if (DEF_hp_4_EQ_msgHeadLen_5___d73)
    INST_messageF.METH_enq();
}

void MOD_mkMHSender::RL_sndMesg()
{
  DEF_mesgInF_first____d62 = INST_mesgInF.METH_first();
  DEF_mesgInF_first__1_BIT_32___d64 = (tUInt8)(DEF_mesgInF_first____d62 >> 32u);
  INST_eopR_1.METH_wset(DEF_mesgInF_first__1_BIT_32___d64);
  INST_mesgOutF.METH_enq(DEF_mesgInF_first____d62);
  if (DEF_mesgInF_first__1_BIT_32___d64)
    INST_messageF.METH_deq();
  INST_mesgInF.METH_deq();
}


/* Methods */

tUInt64 MOD_mkMHSender::METH_src_get()
{
  tUInt64 DEF_mesgOutF_first____d61;
  PORT_EN_src_get = (tUInt8)1u;
  DEF_WILL_FIRE_src_get = (tUInt8)1u;
  DEF_mesgOutF_first____d61 = INST_mesgOutF.METH_first();
  INST_mesgOutF.METH_deq();
  PORT_src_get = DEF_mesgOutF_first____d61;
  return PORT_src_get;
}

tUInt8 MOD_mkMHSender::METH_RDY_src_get()
{
  DEF_CAN_FIRE_src_get = INST_mesgOutF.METH_i_notEmpty();
  PORT_RDY_src_get = DEF_CAN_FIRE_src_get;
  return PORT_RDY_src_get;
}

void MOD_mkMHSender::METH_sink_put(tUInt64 ARG_sink_put)
{
  PORT_EN_sink_put = (tUInt8)1u;
  DEF_WILL_FIRE_sink_put = (tUInt8)1u;
  PORT_sink_put = ARG_sink_put;
  INST_mesgInF.METH_enq(ARG_sink_put);
}

tUInt8 MOD_mkMHSender::METH_RDY_sink_put()
{
  DEF_CAN_FIRE_sink_put = INST_mesgInF.METH_i_notFull();
  PORT_RDY_sink_put = DEF_CAN_FIRE_sink_put;
  return PORT_RDY_sink_put;
}

void MOD_mkMHSender::METH_newLen_put(tUInt32 ARG_newLen_put)
{
  PORT_EN_newLen_put = (tUInt8)1u;
  DEF_WILL_FIRE_newLen_put = (tUInt8)1u;
  PORT_newLen_put = ARG_newLen_put;
  INST_lengthF.METH_enq(ARG_newLen_put);
}

tUInt8 MOD_mkMHSender::METH_RDY_newLen_put()
{
  DEF_CAN_FIRE_newLen_put = INST_lengthF.METH_i_notFull();
  PORT_RDY_newLen_put = DEF_CAN_FIRE_newLen_put;
  return PORT_RDY_newLen_put;
}

tUInt8 MOD_mkMHSender::METH_getLen_dwm()
{
  PORT_getLen_dwm = INST_eopR.METH_read();
  return PORT_getLen_dwm;
}

tUInt8 MOD_mkMHSender::METH_RDY_getLen_dwm()
{
  DEF_CAN_FIRE_getLen_dwm = (tUInt8)1u;
  PORT_RDY_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
  return PORT_RDY_getLen_dwm;
}

tUInt32 MOD_mkMHSender::METH_giveLen_get()
{
  tUInt32 DEF_giveLen_get__avValue1;
  PORT_EN_giveLen_get = (tUInt8)1u;
  DEF_WILL_FIRE_giveLen_get = (tUInt8)1u;
  DEF_giveLen_get__avValue1 = INST_lenToFHF.METH_first();
  INST_lenToFHF.METH_deq();
  PORT_giveLen_get = DEF_giveLen_get__avValue1;
  return PORT_giveLen_get;
}

tUInt8 MOD_mkMHSender::METH_RDY_giveLen_get()
{
  DEF_CAN_FIRE_giveLen_get = INST_lenToFHF.METH_i_notEmpty();
  PORT_RDY_giveLen_get = DEF_CAN_FIRE_giveLen_get;
  return PORT_RDY_giveLen_get;
}


/* Reset routines */

void MOD_mkMHSender::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_msgHeadLen.reset_RST(ARG_rst_in);
  INST_msgDoneF.reset_RST(ARG_rst_in);
  INST_messageF.reset_RST(ARG_rst_in);
  INST_mesgOutF.reset_RST(ARG_rst_in);
  INST_mesgInF.reset_RST(ARG_rst_in);
  INST_lengthF.reset_RST(ARG_rst_in);
  INST_lenToFHF.reset_RST(ARG_rst_in);
  INST_lenR.reset_RST(ARG_rst_in);
  INST_hp.reset_RST(ARG_rst_in);
  INST_headerF.reset_RST(ARG_rst_in);
  INST_fragLenCnt.reset_RST(ARG_rst_in);
  INST_eopR.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMHSender::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMHSender::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_eopR.dump_state(indent + 2u);
  INST_eopR_1.dump_state(indent + 2u);
  INST_fragLenCnt.dump_state(indent + 2u);
  INST_headerF.dump_state(indent + 2u);
  INST_hp.dump_state(indent + 2u);
  INST_lenR.dump_state(indent + 2u);
  INST_lenToFHF.dump_state(indent + 2u);
  INST_lengthF.dump_state(indent + 2u);
  INST_mesgInF.dump_state(indent + 2u);
  INST_mesgOutF.dump_state(indent + 2u);
  INST_messageF.dump_state(indent + 2u);
  INST_mhV.dump_state(indent + 2u);
  INST_mhV_1.dump_state(indent + 2u);
  INST_mhV_2.dump_state(indent + 2u);
  INST_mhV_3.dump_state(indent + 2u);
  INST_mhV_4.dump_state(indent + 2u);
  INST_mhV_5.dump_state(indent + 2u);
  INST_msgDoneF.dump_state(indent + 2u);
  INST_msgHeadLen.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMHSender::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 56u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_eopR__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_popMhV", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_sndHead", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_sndMesg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_giveLen_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_src_get", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_eopR__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_popMhV", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_sndHead", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_sndMesg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_giveLen_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2254", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2614", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "hp_4_EQ_msgHeadLen_5___d73", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mesgInF_first__1_BIT_32___d64", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mesgInF_first____d62", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_giveLen_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_giveLen_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "giveLen_get", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "newLen_put", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sink_put", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "src_get", 33u);
  num = INST_eopR.dump_VCD_defs(num);
  num = INST_eopR_1.dump_VCD_defs(num);
  num = INST_fragLenCnt.dump_VCD_defs(num);
  num = INST_headerF.dump_VCD_defs(num);
  num = INST_hp.dump_VCD_defs(num);
  num = INST_lenR.dump_VCD_defs(num);
  num = INST_lenToFHF.dump_VCD_defs(num);
  num = INST_lengthF.dump_VCD_defs(num);
  num = INST_mesgInF.dump_VCD_defs(num);
  num = INST_mesgOutF.dump_VCD_defs(num);
  num = INST_messageF.dump_VCD_defs(num);
  num = INST_mhV.dump_VCD_defs(num);
  num = INST_mhV_1.dump_VCD_defs(num);
  num = INST_mhV_2.dump_VCD_defs(num);
  num = INST_mhV_3.dump_VCD_defs(num);
  num = INST_mhV_4.dump_VCD_defs(num);
  num = INST_mhV_5.dump_VCD_defs(num);
  num = INST_msgDoneF.dump_VCD_defs(num);
  num = INST_msgHeadLen.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMHSender::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMHSender &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMHSender::vcd_defs(tVCDDumpType dt, MOD_mkMHSender &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_eopR__dreg_update) != DEF_CAN_FIRE_RL_eopR__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_eopR__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_eopR__dreg_update = DEF_CAN_FIRE_RL_eopR__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_popMhV) != DEF_CAN_FIRE_RL_popMhV)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_popMhV, 1u);
	backing.DEF_CAN_FIRE_RL_popMhV = DEF_CAN_FIRE_RL_popMhV;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_sndHead) != DEF_CAN_FIRE_RL_sndHead)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_sndHead, 1u);
	backing.DEF_CAN_FIRE_RL_sndHead = DEF_CAN_FIRE_RL_sndHead;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_sndMesg) != DEF_CAN_FIRE_RL_sndMesg)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_sndMesg, 1u);
	backing.DEF_CAN_FIRE_RL_sndMesg = DEF_CAN_FIRE_RL_sndMesg;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_getLen_dwm) != DEF_CAN_FIRE_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_getLen_dwm, 1u);
	backing.DEF_CAN_FIRE_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_giveLen_get) != DEF_CAN_FIRE_giveLen_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_giveLen_get, 1u);
	backing.DEF_CAN_FIRE_giveLen_get = DEF_CAN_FIRE_giveLen_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_newLen_put) != DEF_CAN_FIRE_newLen_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_newLen_put, 1u);
	backing.DEF_CAN_FIRE_newLen_put = DEF_CAN_FIRE_newLen_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_sink_put) != DEF_CAN_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_sink_put, 1u);
	backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_src_get) != DEF_CAN_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_src_get, 1u);
	backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_eopR__dreg_update) != DEF_WILL_FIRE_RL_eopR__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_eopR__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_eopR__dreg_update = DEF_WILL_FIRE_RL_eopR__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_popMhV) != DEF_WILL_FIRE_RL_popMhV)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_popMhV, 1u);
	backing.DEF_WILL_FIRE_RL_popMhV = DEF_WILL_FIRE_RL_popMhV;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_sndHead) != DEF_WILL_FIRE_RL_sndHead)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_sndHead, 1u);
	backing.DEF_WILL_FIRE_RL_sndHead = DEF_WILL_FIRE_RL_sndHead;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_sndMesg) != DEF_WILL_FIRE_RL_sndMesg)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_sndMesg, 1u);
	backing.DEF_WILL_FIRE_RL_sndMesg = DEF_WILL_FIRE_RL_sndMesg;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_giveLen_get) != DEF_WILL_FIRE_giveLen_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_giveLen_get, 1u);
	backing.DEF_WILL_FIRE_giveLen_get = DEF_WILL_FIRE_giveLen_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_newLen_put) != DEF_WILL_FIRE_newLen_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_newLen_put, 1u);
	backing.DEF_WILL_FIRE_newLen_put = DEF_WILL_FIRE_newLen_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_sink_put) != DEF_WILL_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_sink_put, 1u);
	backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_src_get) != DEF_WILL_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_src_get, 1u);
	backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      }
      ++num;
      if ((backing.DEF_b__h2254) != DEF_b__h2254)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2254, 9u);
	backing.DEF_b__h2254 = DEF_b__h2254;
      }
      ++num;
      if ((backing.DEF_b__h2614) != DEF_b__h2614)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2614, 9u);
	backing.DEF_b__h2614 = DEF_b__h2614;
      }
      ++num;
      if ((backing.DEF_hp_4_EQ_msgHeadLen_5___d73) != DEF_hp_4_EQ_msgHeadLen_5___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_hp_4_EQ_msgHeadLen_5___d73, 1u);
	backing.DEF_hp_4_EQ_msgHeadLen_5___d73 = DEF_hp_4_EQ_msgHeadLen_5___d73;
      }
      ++num;
      if ((backing.DEF_mesgInF_first__1_BIT_32___d64) != DEF_mesgInF_first__1_BIT_32___d64)
      {
	vcd_write_val(sim_hdl, num, DEF_mesgInF_first__1_BIT_32___d64, 1u);
	backing.DEF_mesgInF_first__1_BIT_32___d64 = DEF_mesgInF_first__1_BIT_32___d64;
      }
      ++num;
      if ((backing.DEF_mesgInF_first____d62) != DEF_mesgInF_first____d62)
      {
	vcd_write_val(sim_hdl, num, DEF_mesgInF_first____d62, 33u);
	backing.DEF_mesgInF_first____d62 = DEF_mesgInF_first____d62;
      }
      ++num;
      if ((backing.PORT_EN_giveLen_get) != PORT_EN_giveLen_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_giveLen_get, 1u);
	backing.PORT_EN_giveLen_get = PORT_EN_giveLen_get;
      }
      ++num;
      if ((backing.PORT_EN_newLen_put) != PORT_EN_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_newLen_put, 1u);
	backing.PORT_EN_newLen_put = PORT_EN_newLen_put;
      }
      ++num;
      if ((backing.PORT_EN_sink_put) != PORT_EN_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_sink_put, 1u);
	backing.PORT_EN_sink_put = PORT_EN_sink_put;
      }
      ++num;
      if ((backing.PORT_EN_src_get) != PORT_EN_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_src_get, 1u);
	backing.PORT_EN_src_get = PORT_EN_src_get;
      }
      ++num;
      if ((backing.PORT_RDY_getLen_dwm) != PORT_RDY_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_getLen_dwm, 1u);
	backing.PORT_RDY_getLen_dwm = PORT_RDY_getLen_dwm;
      }
      ++num;
      if ((backing.PORT_RDY_giveLen_get) != PORT_RDY_giveLen_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_giveLen_get, 1u);
	backing.PORT_RDY_giveLen_get = PORT_RDY_giveLen_get;
      }
      ++num;
      if ((backing.PORT_RDY_newLen_put) != PORT_RDY_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_newLen_put, 1u);
	backing.PORT_RDY_newLen_put = PORT_RDY_newLen_put;
      }
      ++num;
      if ((backing.PORT_RDY_sink_put) != PORT_RDY_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_sink_put, 1u);
	backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      }
      ++num;
      if ((backing.PORT_RDY_src_get) != PORT_RDY_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_src_get, 1u);
	backing.PORT_RDY_src_get = PORT_RDY_src_get;
      }
      ++num;
      if ((backing.PORT_getLen_dwm) != PORT_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, PORT_getLen_dwm, 1u);
	backing.PORT_getLen_dwm = PORT_getLen_dwm;
      }
      ++num;
      if ((backing.PORT_giveLen_get) != PORT_giveLen_get)
      {
	vcd_write_val(sim_hdl, num, PORT_giveLen_get, 9u);
	backing.PORT_giveLen_get = PORT_giveLen_get;
      }
      ++num;
      if ((backing.PORT_newLen_put) != PORT_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_newLen_put, 9u);
	backing.PORT_newLen_put = PORT_newLen_put;
      }
      ++num;
      if ((backing.PORT_sink_put) != PORT_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_sink_put, 33u);
	backing.PORT_sink_put = PORT_sink_put;
      }
      ++num;
      if ((backing.PORT_src_get) != PORT_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_src_get, 33u);
	backing.PORT_src_get = PORT_src_get;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_eopR__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_eopR__dreg_update = DEF_CAN_FIRE_RL_eopR__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_popMhV, 1u);
      backing.DEF_CAN_FIRE_RL_popMhV = DEF_CAN_FIRE_RL_popMhV;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_sndHead, 1u);
      backing.DEF_CAN_FIRE_RL_sndHead = DEF_CAN_FIRE_RL_sndHead;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_sndMesg, 1u);
      backing.DEF_CAN_FIRE_RL_sndMesg = DEF_CAN_FIRE_RL_sndMesg;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_getLen_dwm, 1u);
      backing.DEF_CAN_FIRE_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_giveLen_get, 1u);
      backing.DEF_CAN_FIRE_giveLen_get = DEF_CAN_FIRE_giveLen_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_newLen_put, 1u);
      backing.DEF_CAN_FIRE_newLen_put = DEF_CAN_FIRE_newLen_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_sink_put, 1u);
      backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_src_get, 1u);
      backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_eopR__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_eopR__dreg_update = DEF_WILL_FIRE_RL_eopR__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_popMhV, 1u);
      backing.DEF_WILL_FIRE_RL_popMhV = DEF_WILL_FIRE_RL_popMhV;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_sndHead, 1u);
      backing.DEF_WILL_FIRE_RL_sndHead = DEF_WILL_FIRE_RL_sndHead;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_sndMesg, 1u);
      backing.DEF_WILL_FIRE_RL_sndMesg = DEF_WILL_FIRE_RL_sndMesg;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_giveLen_get, 1u);
      backing.DEF_WILL_FIRE_giveLen_get = DEF_WILL_FIRE_giveLen_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_newLen_put, 1u);
      backing.DEF_WILL_FIRE_newLen_put = DEF_WILL_FIRE_newLen_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_sink_put, 1u);
      backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_src_get, 1u);
      backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, DEF_b__h2254, 9u);
      backing.DEF_b__h2254 = DEF_b__h2254;
      vcd_write_val(sim_hdl, num++, DEF_b__h2614, 9u);
      backing.DEF_b__h2614 = DEF_b__h2614;
      vcd_write_val(sim_hdl, num++, DEF_hp_4_EQ_msgHeadLen_5___d73, 1u);
      backing.DEF_hp_4_EQ_msgHeadLen_5___d73 = DEF_hp_4_EQ_msgHeadLen_5___d73;
      vcd_write_val(sim_hdl, num++, DEF_mesgInF_first__1_BIT_32___d64, 1u);
      backing.DEF_mesgInF_first__1_BIT_32___d64 = DEF_mesgInF_first__1_BIT_32___d64;
      vcd_write_val(sim_hdl, num++, DEF_mesgInF_first____d62, 33u);
      backing.DEF_mesgInF_first____d62 = DEF_mesgInF_first____d62;
      vcd_write_val(sim_hdl, num++, PORT_EN_giveLen_get, 1u);
      backing.PORT_EN_giveLen_get = PORT_EN_giveLen_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_newLen_put, 1u);
      backing.PORT_EN_newLen_put = PORT_EN_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_sink_put, 1u);
      backing.PORT_EN_sink_put = PORT_EN_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_src_get, 1u);
      backing.PORT_EN_src_get = PORT_EN_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_getLen_dwm, 1u);
      backing.PORT_RDY_getLen_dwm = PORT_RDY_getLen_dwm;
      vcd_write_val(sim_hdl, num++, PORT_RDY_giveLen_get, 1u);
      backing.PORT_RDY_giveLen_get = PORT_RDY_giveLen_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_newLen_put, 1u);
      backing.PORT_RDY_newLen_put = PORT_RDY_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_sink_put, 1u);
      backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_src_get, 1u);
      backing.PORT_RDY_src_get = PORT_RDY_src_get;
      vcd_write_val(sim_hdl, num++, PORT_getLen_dwm, 1u);
      backing.PORT_getLen_dwm = PORT_getLen_dwm;
      vcd_write_val(sim_hdl, num++, PORT_giveLen_get, 9u);
      backing.PORT_giveLen_get = PORT_giveLen_get;
      vcd_write_val(sim_hdl, num++, PORT_newLen_put, 9u);
      backing.PORT_newLen_put = PORT_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_sink_put, 33u);
      backing.PORT_sink_put = PORT_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_src_get, 33u);
      backing.PORT_src_get = PORT_src_get;
    }
}

void MOD_mkMHSender::vcd_prims(tVCDDumpType dt, MOD_mkMHSender &backing)
{
  INST_eopR.dump_VCD(dt, backing.INST_eopR);
  INST_eopR_1.dump_VCD(dt, backing.INST_eopR_1);
  INST_fragLenCnt.dump_VCD(dt, backing.INST_fragLenCnt);
  INST_headerF.dump_VCD(dt, backing.INST_headerF);
  INST_hp.dump_VCD(dt, backing.INST_hp);
  INST_lenR.dump_VCD(dt, backing.INST_lenR);
  INST_lenToFHF.dump_VCD(dt, backing.INST_lenToFHF);
  INST_lengthF.dump_VCD(dt, backing.INST_lengthF);
  INST_mesgInF.dump_VCD(dt, backing.INST_mesgInF);
  INST_mesgOutF.dump_VCD(dt, backing.INST_mesgOutF);
  INST_messageF.dump_VCD(dt, backing.INST_messageF);
  INST_mhV.dump_VCD(dt, backing.INST_mhV);
  INST_mhV_1.dump_VCD(dt, backing.INST_mhV_1);
  INST_mhV_2.dump_VCD(dt, backing.INST_mhV_2);
  INST_mhV_3.dump_VCD(dt, backing.INST_mhV_3);
  INST_mhV_4.dump_VCD(dt, backing.INST_mhV_4);
  INST_mhV_5.dump_VCD(dt, backing.INST_mhV_5);
  INST_msgDoneF.dump_VCD(dt, backing.INST_msgDoneF);
  INST_msgHeadLen.dump_VCD(dt, backing.INST_msgHeadLen);
}
