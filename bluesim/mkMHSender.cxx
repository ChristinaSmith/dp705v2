/*
 * Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
 * 
 * On Thu Oct 11 17:17:19 EDT 2012
 * 
 */
#include "bluesim_primitives.h"
#include "mkMHSender.h"


/* Constructor */
MOD_mkMHSender::MOD_mkMHSender(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_fragLenCnt(simHdl, "fragLenCnt", this, 9u, 1u, (tUInt8)0u),
    INST_headerF(simHdl, "headerF", this, 0u, 2u, 1u, 0u),
    INST_hp(simHdl, "hp", this, 9u, 0u, (tUInt8)0u),
    INST_lenR(simHdl, "lenR", this, 10u, 170u, (tUInt8)0u),
    INST_lengthF(simHdl, "lengthF", this, 9u, 2u, 1u, 0u),
    INST_mesgInF(simHdl, "mesgInF", this, 33u, 2u, 1u, 0u),
    INST_mesgOutF(simHdl, "mesgOutF", this, 33u, 2u, 1u, 0u),
    INST_messageF(simHdl, "messageF", this, 0u, 2u, 1u, 0u),
    INST_mhV(simHdl, "mhV", this, 33u),
    INST_mhV_1(simHdl, "mhV_1", this, 33u),
    INST_mhV_2(simHdl, "mhV_2", this, 33u),
    INST_mhV_3(simHdl, "mhV_3", this, 33u),
    INST_mhV_4(simHdl, "mhV_4", this, 33u),
    INST_mhV_5(simHdl, "mhV_5", this, 33u),
    INST_msgDoneF(simHdl, "msgDoneF", this, 0u, 2u, 1u, 0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_src_get = false;
  PORT_EN_sink_put = false;
  PORT_EN_newLen_put = false;
  PORT_sink_put = 0llu;
  PORT_newLen_put = 0u;
  PORT_src_get = 0llu;
  PORT_RDY_src_get = false;
  PORT_RDY_sink_put = false;
  PORT_RDY_newLen_put = false;
  PORT_getLen_dwm = false;
  PORT_RDY_getLen_dwm = false;
  symbol_count = 42u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMHSender::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_getLen_dwm", SYM_DEF, &DEF_CAN_FIRE_getLen_dwm, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_newLen_put", SYM_DEF, &DEF_CAN_FIRE_newLen_put, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_popMhV", SYM_DEF, &DEF_CAN_FIRE_RL_popMhV, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_sndHead", SYM_DEF, &DEF_CAN_FIRE_RL_sndHead, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_sndMesg", SYM_DEF, &DEF_CAN_FIRE_RL_sndMesg, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_sink_put", SYM_DEF, &DEF_CAN_FIRE_sink_put, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_src_get", SYM_DEF, &DEF_CAN_FIRE_src_get, 1u);
  init_symbol(&symbols[7u], "EN_newLen_put", SYM_PORT, &PORT_EN_newLen_put, 1u);
  init_symbol(&symbols[8u], "EN_sink_put", SYM_PORT, &PORT_EN_sink_put, 1u);
  init_symbol(&symbols[9u], "EN_src_get", SYM_PORT, &PORT_EN_src_get, 1u);
  init_symbol(&symbols[10u], "fragLenCnt", SYM_MODULE, &INST_fragLenCnt);
  init_symbol(&symbols[11u], "getLen_dwm", SYM_PORT, &PORT_getLen_dwm, 1u);
  init_symbol(&symbols[12u], "headerF", SYM_MODULE, &INST_headerF);
  init_symbol(&symbols[13u], "hp", SYM_MODULE, &INST_hp);
  init_symbol(&symbols[14u], "lengthF", SYM_MODULE, &INST_lengthF);
  init_symbol(&symbols[15u], "lenR", SYM_MODULE, &INST_lenR);
  init_symbol(&symbols[16u], "mesgInF", SYM_MODULE, &INST_mesgInF);
  init_symbol(&symbols[17u], "mesgOutF", SYM_MODULE, &INST_mesgOutF);
  init_symbol(&symbols[18u], "messageF", SYM_MODULE, &INST_messageF);
  init_symbol(&symbols[19u], "mhV", SYM_MODULE, &INST_mhV);
  init_symbol(&symbols[20u], "mhV_1", SYM_MODULE, &INST_mhV_1);
  init_symbol(&symbols[21u], "mhV_2", SYM_MODULE, &INST_mhV_2);
  init_symbol(&symbols[22u], "mhV_3", SYM_MODULE, &INST_mhV_3);
  init_symbol(&symbols[23u], "mhV_4", SYM_MODULE, &INST_mhV_4);
  init_symbol(&symbols[24u], "mhV_5", SYM_MODULE, &INST_mhV_5);
  init_symbol(&symbols[25u], "msgDoneF", SYM_MODULE, &INST_msgDoneF);
  init_symbol(&symbols[26u], "newLen_put", SYM_PORT, &PORT_newLen_put, 9u);
  init_symbol(&symbols[27u], "RDY_getLen_dwm", SYM_PORT, &PORT_RDY_getLen_dwm, 1u);
  init_symbol(&symbols[28u], "RDY_newLen_put", SYM_PORT, &PORT_RDY_newLen_put, 1u);
  init_symbol(&symbols[29u], "RDY_sink_put", SYM_PORT, &PORT_RDY_sink_put, 1u);
  init_symbol(&symbols[30u], "RDY_src_get", SYM_PORT, &PORT_RDY_src_get, 1u);
  init_symbol(&symbols[31u], "RL_popMhV", SYM_RULE);
  init_symbol(&symbols[32u], "RL_sndHead", SYM_RULE);
  init_symbol(&symbols[33u], "RL_sndMesg", SYM_RULE);
  init_symbol(&symbols[34u], "sink_put", SYM_PORT, &PORT_sink_put, 33u);
  init_symbol(&symbols[35u], "src_get", SYM_PORT, &PORT_src_get, 33u);
  init_symbol(&symbols[36u], "WILL_FIRE_newLen_put", SYM_DEF, &DEF_WILL_FIRE_newLen_put, 1u);
  init_symbol(&symbols[37u], "WILL_FIRE_RL_popMhV", SYM_DEF, &DEF_WILL_FIRE_RL_popMhV, 1u);
  init_symbol(&symbols[38u], "WILL_FIRE_RL_sndHead", SYM_DEF, &DEF_WILL_FIRE_RL_sndHead, 1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_sndMesg", SYM_DEF, &DEF_WILL_FIRE_RL_sndMesg, 1u);
  init_symbol(&symbols[40u], "WILL_FIRE_sink_put", SYM_DEF, &DEF_WILL_FIRE_sink_put, 1u);
  init_symbol(&symbols[41u], "WILL_FIRE_src_get", SYM_DEF, &DEF_WILL_FIRE_src_get, 1u);
}


/* Rule actions */

void MOD_mkMHSender::RL_popMhV()
{
  tUInt32 DEF__1_CONCAT_lengthF_first___d8;
  tUInt64 DEF__0_CONCAT_lengthF_first_CONCAT_0b0___d7;
  tUInt32 DEF_lengthF_first____d61;
  DEF_lengthF_first____d61 = INST_lengthF.METH_first();
  DEF__0_CONCAT_lengthF_first_CONCAT_0b0___d7 = 8589934591llu & (((((tUInt64)((tUInt8)0u)) << 25u) | (((tUInt64)(DEF_lengthF_first____d61)) << 16u)) | (tUInt64)(0u));
  DEF__1_CONCAT_lengthF_first___d8 = 1023u & ((((tUInt32)((tUInt8)1u)) << 9u) | DEF_lengthF_first____d61);
  INST_mhV.METH_write(0llu);
  INST_mhV_2.METH_write(2llu);
  INST_mhV_1.METH_write(1llu);
  INST_mhV_3.METH_write(3llu);
  INST_mhV_4.METH_write(4llu);
  INST_mhV_5.METH_write(DEF__0_CONCAT_lengthF_first_CONCAT_0b0___d7);
  INST_lenR.METH_write(DEF__1_CONCAT_lengthF_first___d8);
  INST_headerF.METH_enq();
  INST_lengthF.METH_deq();
}

void MOD_mkMHSender::RL_sndHead()
{
  tUInt32 DEF_IF_hp_6_EQ_5_7_THEN_0_ELSE_hp_6_PLUS_1_0___d41;
  tUInt8 DEF_hp_6_EQ_5___d64;
  tUInt64 DEF_IF_hp_6_EQ_0_7_THEN_mhV_8_ELSE_IF_hp_6_EQ_1_9__ETC___d39;
  tUInt32 DEF_mhV_5_9_BITS_31_TO_0___d73;
  tUInt64 DEF_mhV_5___d72;
  tUInt32 DEF_b__h1902;
  tUInt8 DEF_NOT_hp_6_EQ_5_7___d28;
  DEF_b__h1902 = INST_hp.METH_read();
  DEF_mhV_5___d72 = INST_mhV_5.METH_read();
  DEF_mhV_5_9_BITS_31_TO_0___d73 = (tUInt32)(DEF_mhV_5___d72);
  DEF_hp_6_EQ_5___d64 = DEF_b__h1902 == 5u;
  DEF_NOT_hp_6_EQ_5_7___d28 = !DEF_hp_6_EQ_5___d64;
  DEF_IF_hp_6_EQ_0_7_THEN_mhV_8_ELSE_IF_hp_6_EQ_1_9__ETC___d39 = DEF_b__h1902 == 0u ? INST_mhV.METH_read() : (DEF_b__h1902 == 1u ? INST_mhV_1.METH_read() : (DEF_b__h1902 == 2u ? INST_mhV_2.METH_read() : (DEF_b__h1902 == 3u ? INST_mhV_3.METH_read() : (DEF_b__h1902 == 4u ? INST_mhV_4.METH_read() : 8589934591llu & ((((tUInt64)(DEF_NOT_hp_6_EQ_5_7___d28 || (tUInt8)(DEF_mhV_5___d72 >> 32u))) << 32u) | (tUInt64)(DEF_hp_6_EQ_5___d64 ? DEF_mhV_5_9_BITS_31_TO_0___d73 : DEF_mhV_5_9_BITS_31_TO_0___d73))))));
  DEF_IF_hp_6_EQ_5_7_THEN_0_ELSE_hp_6_PLUS_1_0___d41 = DEF_hp_6_EQ_5___d64 ? 0u : 511u & (DEF_b__h1902 + 1u);
  INST_mesgOutF.METH_enq(DEF_IF_hp_6_EQ_0_7_THEN_mhV_8_ELSE_IF_hp_6_EQ_1_9__ETC___d39);
  INST_hp.METH_write(DEF_IF_hp_6_EQ_5_7_THEN_0_ELSE_hp_6_PLUS_1_0___d41);
  if (DEF_hp_6_EQ_5___d64)
    INST_headerF.METH_deq();
  if (DEF_hp_6_EQ_5___d64)
    INST_messageF.METH_enq();
}

void MOD_mkMHSender::RL_sndMesg()
{
  tUInt32 DEF_IF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_ETC___d56;
  tUInt8 DEF_mesgInF_first__8_BIT_32___d62;
  tUInt64 DEF_mesgInF_first____d60;
  DEF_mesgInF_first____d60 = INST_mesgInF.METH_first();
  DEF_lenR___d67 = INST_lenR.METH_read();
  DEF_b__h2474 = INST_fragLenCnt.METH_read();
  DEF_mesgInF_first__8_BIT_32___d62 = (tUInt8)(DEF_mesgInF_first____d60 >> 32u);
  DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76 = DEF_b__h2474 == ((tUInt8)(DEF_lenR___d67 >> 9u) ? (tUInt32)(511u & DEF_lenR___d67) : 511u);
  DEF_IF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_ETC___d56 = DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76 ? 1u : 511u & (DEF_b__h2474 + 1u);
  INST_mesgOutF.METH_enq(DEF_mesgInF_first____d60);
  INST_fragLenCnt.METH_write(DEF_IF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_ETC___d56);
  INST_mesgInF.METH_deq();
  if (DEF_mesgInF_first__8_BIT_32___d62)
    INST_messageF.METH_deq();
}


/* Methods */

tUInt64 MOD_mkMHSender::METH_src_get()
{
  tUInt64 DEF_mesgOutF_first____d59;
  PORT_EN_src_get = (tUInt8)1u;
  DEF_WILL_FIRE_src_get = (tUInt8)1u;
  DEF_mesgOutF_first____d59 = INST_mesgOutF.METH_first();
  INST_mesgOutF.METH_deq();
  PORT_src_get = DEF_mesgOutF_first____d59;
  return PORT_src_get;
}

tUInt8 MOD_mkMHSender::METH_RDY_src_get()
{
  DEF_CAN_FIRE_src_get = INST_mesgOutF.METH_i_notEmpty();
  PORT_RDY_src_get = DEF_CAN_FIRE_src_get;
  return PORT_RDY_src_get;
}

void MOD_mkMHSender::METH_sink_put(tUInt64 ARG_sink_put)
{
  PORT_EN_sink_put = (tUInt8)1u;
  DEF_WILL_FIRE_sink_put = (tUInt8)1u;
  PORT_sink_put = ARG_sink_put;
  INST_mesgInF.METH_enq(ARG_sink_put);
}

tUInt8 MOD_mkMHSender::METH_RDY_sink_put()
{
  DEF_CAN_FIRE_sink_put = INST_mesgInF.METH_i_notFull();
  PORT_RDY_sink_put = DEF_CAN_FIRE_sink_put;
  return PORT_RDY_sink_put;
}

void MOD_mkMHSender::METH_newLen_put(tUInt32 ARG_newLen_put)
{
  PORT_EN_newLen_put = (tUInt8)1u;
  DEF_WILL_FIRE_newLen_put = (tUInt8)1u;
  PORT_newLen_put = ARG_newLen_put;
  INST_lengthF.METH_enq(ARG_newLen_put);
}

tUInt8 MOD_mkMHSender::METH_RDY_newLen_put()
{
  DEF_CAN_FIRE_newLen_put = INST_lengthF.METH_i_notFull();
  PORT_RDY_newLen_put = DEF_CAN_FIRE_newLen_put;
  return PORT_RDY_newLen_put;
}

tUInt8 MOD_mkMHSender::METH_getLen_dwm()
{
  DEF_lenR___d67 = INST_lenR.METH_read();
  DEF_b__h2474 = INST_fragLenCnt.METH_read();
  DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76 = DEF_b__h2474 == ((tUInt8)(DEF_lenR___d67 >> 9u) ? (tUInt32)(511u & DEF_lenR___d67) : 511u);
  PORT_getLen_dwm = DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76;
  return PORT_getLen_dwm;
}

tUInt8 MOD_mkMHSender::METH_RDY_getLen_dwm()
{
  DEF_CAN_FIRE_getLen_dwm = (tUInt8)1u;
  PORT_RDY_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
  return PORT_RDY_getLen_dwm;
}


/* Reset routines */

void MOD_mkMHSender::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_msgDoneF.reset_RST(ARG_rst_in);
  INST_messageF.reset_RST(ARG_rst_in);
  INST_mesgOutF.reset_RST(ARG_rst_in);
  INST_mesgInF.reset_RST(ARG_rst_in);
  INST_lengthF.reset_RST(ARG_rst_in);
  INST_lenR.reset_RST(ARG_rst_in);
  INST_hp.reset_RST(ARG_rst_in);
  INST_headerF.reset_RST(ARG_rst_in);
  INST_fragLenCnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMHSender::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMHSender::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fragLenCnt.dump_state(indent + 2u);
  INST_headerF.dump_state(indent + 2u);
  INST_hp.dump_state(indent + 2u);
  INST_lenR.dump_state(indent + 2u);
  INST_lengthF.dump_state(indent + 2u);
  INST_mesgInF.dump_state(indent + 2u);
  INST_mesgOutF.dump_state(indent + 2u);
  INST_messageF.dump_state(indent + 2u);
  INST_mhV.dump_state(indent + 2u);
  INST_mhV_1.dump_state(indent + 2u);
  INST_mhV_2.dump_state(indent + 2u);
  INST_mhV_3.dump_state(indent + 2u);
  INST_mhV_4.dump_state(indent + 2u);
  INST_mhV_5.dump_state(indent + 2u);
  INST_msgDoneF.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMHSender::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 43u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_popMhV", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_sndHead", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_sndMesg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_src_get", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_popMhV", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_sndHead", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_sndMesg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2474", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "lenR___d67", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_newLen_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_sink_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_src_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getLen_dwm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "newLen_put", 9u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sink_put", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "src_get", 33u);
  num = INST_fragLenCnt.dump_VCD_defs(num);
  num = INST_headerF.dump_VCD_defs(num);
  num = INST_hp.dump_VCD_defs(num);
  num = INST_lenR.dump_VCD_defs(num);
  num = INST_lengthF.dump_VCD_defs(num);
  num = INST_mesgInF.dump_VCD_defs(num);
  num = INST_mesgOutF.dump_VCD_defs(num);
  num = INST_messageF.dump_VCD_defs(num);
  num = INST_mhV.dump_VCD_defs(num);
  num = INST_mhV_1.dump_VCD_defs(num);
  num = INST_mhV_2.dump_VCD_defs(num);
  num = INST_mhV_3.dump_VCD_defs(num);
  num = INST_mhV_4.dump_VCD_defs(num);
  num = INST_mhV_5.dump_VCD_defs(num);
  num = INST_msgDoneF.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMHSender::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMHSender &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMHSender::vcd_defs(tVCDDumpType dt, MOD_mkMHSender &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 9u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_popMhV) != DEF_CAN_FIRE_RL_popMhV)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_popMhV, 1u);
	backing.DEF_CAN_FIRE_RL_popMhV = DEF_CAN_FIRE_RL_popMhV;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_sndHead) != DEF_CAN_FIRE_RL_sndHead)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_sndHead, 1u);
	backing.DEF_CAN_FIRE_RL_sndHead = DEF_CAN_FIRE_RL_sndHead;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_sndMesg) != DEF_CAN_FIRE_RL_sndMesg)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_sndMesg, 1u);
	backing.DEF_CAN_FIRE_RL_sndMesg = DEF_CAN_FIRE_RL_sndMesg;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_getLen_dwm) != DEF_CAN_FIRE_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_getLen_dwm, 1u);
	backing.DEF_CAN_FIRE_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_newLen_put) != DEF_CAN_FIRE_newLen_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_newLen_put, 1u);
	backing.DEF_CAN_FIRE_newLen_put = DEF_CAN_FIRE_newLen_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_sink_put) != DEF_CAN_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_sink_put, 1u);
	backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_src_get) != DEF_CAN_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_src_get, 1u);
	backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_popMhV) != DEF_WILL_FIRE_RL_popMhV)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_popMhV, 1u);
	backing.DEF_WILL_FIRE_RL_popMhV = DEF_WILL_FIRE_RL_popMhV;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_sndHead) != DEF_WILL_FIRE_RL_sndHead)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_sndHead, 1u);
	backing.DEF_WILL_FIRE_RL_sndHead = DEF_WILL_FIRE_RL_sndHead;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_sndMesg) != DEF_WILL_FIRE_RL_sndMesg)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_sndMesg, 1u);
	backing.DEF_WILL_FIRE_RL_sndMesg = DEF_WILL_FIRE_RL_sndMesg;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_newLen_put) != DEF_WILL_FIRE_newLen_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_newLen_put, 1u);
	backing.DEF_WILL_FIRE_newLen_put = DEF_WILL_FIRE_newLen_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_sink_put) != DEF_WILL_FIRE_sink_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_sink_put, 1u);
	backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_src_get) != DEF_WILL_FIRE_src_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_src_get, 1u);
	backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      }
      ++num;
      if ((backing.DEF_b__h2474) != DEF_b__h2474)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2474, 9u);
	backing.DEF_b__h2474 = DEF_b__h2474;
      }
      ++num;
      if ((backing.DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76) != DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76)
      {
	vcd_write_val(sim_hdl, num, DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76, 1u);
	backing.DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76 = DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76;
      }
      ++num;
      if ((backing.DEF_lenR___d67) != DEF_lenR___d67)
      {
	vcd_write_val(sim_hdl, num, DEF_lenR___d67, 10u);
	backing.DEF_lenR___d67 = DEF_lenR___d67;
      }
      ++num;
      if ((backing.PORT_EN_newLen_put) != PORT_EN_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_newLen_put, 1u);
	backing.PORT_EN_newLen_put = PORT_EN_newLen_put;
      }
      ++num;
      if ((backing.PORT_EN_sink_put) != PORT_EN_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_sink_put, 1u);
	backing.PORT_EN_sink_put = PORT_EN_sink_put;
      }
      ++num;
      if ((backing.PORT_EN_src_get) != PORT_EN_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_src_get, 1u);
	backing.PORT_EN_src_get = PORT_EN_src_get;
      }
      ++num;
      if ((backing.PORT_RDY_getLen_dwm) != PORT_RDY_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_getLen_dwm, 1u);
	backing.PORT_RDY_getLen_dwm = PORT_RDY_getLen_dwm;
      }
      ++num;
      if ((backing.PORT_RDY_newLen_put) != PORT_RDY_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_newLen_put, 1u);
	backing.PORT_RDY_newLen_put = PORT_RDY_newLen_put;
      }
      ++num;
      if ((backing.PORT_RDY_sink_put) != PORT_RDY_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_sink_put, 1u);
	backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      }
      ++num;
      if ((backing.PORT_RDY_src_get) != PORT_RDY_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_src_get, 1u);
	backing.PORT_RDY_src_get = PORT_RDY_src_get;
      }
      ++num;
      if ((backing.PORT_getLen_dwm) != PORT_getLen_dwm)
      {
	vcd_write_val(sim_hdl, num, PORT_getLen_dwm, 1u);
	backing.PORT_getLen_dwm = PORT_getLen_dwm;
      }
      ++num;
      if ((backing.PORT_newLen_put) != PORT_newLen_put)
      {
	vcd_write_val(sim_hdl, num, PORT_newLen_put, 9u);
	backing.PORT_newLen_put = PORT_newLen_put;
      }
      ++num;
      if ((backing.PORT_sink_put) != PORT_sink_put)
      {
	vcd_write_val(sim_hdl, num, PORT_sink_put, 33u);
	backing.PORT_sink_put = PORT_sink_put;
      }
      ++num;
      if ((backing.PORT_src_get) != PORT_src_get)
      {
	vcd_write_val(sim_hdl, num, PORT_src_get, 33u);
	backing.PORT_src_get = PORT_src_get;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_popMhV, 1u);
      backing.DEF_CAN_FIRE_RL_popMhV = DEF_CAN_FIRE_RL_popMhV;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_sndHead, 1u);
      backing.DEF_CAN_FIRE_RL_sndHead = DEF_CAN_FIRE_RL_sndHead;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_sndMesg, 1u);
      backing.DEF_CAN_FIRE_RL_sndMesg = DEF_CAN_FIRE_RL_sndMesg;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_getLen_dwm, 1u);
      backing.DEF_CAN_FIRE_getLen_dwm = DEF_CAN_FIRE_getLen_dwm;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_newLen_put, 1u);
      backing.DEF_CAN_FIRE_newLen_put = DEF_CAN_FIRE_newLen_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_sink_put, 1u);
      backing.DEF_CAN_FIRE_sink_put = DEF_CAN_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_src_get, 1u);
      backing.DEF_CAN_FIRE_src_get = DEF_CAN_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_popMhV, 1u);
      backing.DEF_WILL_FIRE_RL_popMhV = DEF_WILL_FIRE_RL_popMhV;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_sndHead, 1u);
      backing.DEF_WILL_FIRE_RL_sndHead = DEF_WILL_FIRE_RL_sndHead;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_sndMesg, 1u);
      backing.DEF_WILL_FIRE_RL_sndMesg = DEF_WILL_FIRE_RL_sndMesg;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_newLen_put, 1u);
      backing.DEF_WILL_FIRE_newLen_put = DEF_WILL_FIRE_newLen_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_sink_put, 1u);
      backing.DEF_WILL_FIRE_sink_put = DEF_WILL_FIRE_sink_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_src_get, 1u);
      backing.DEF_WILL_FIRE_src_get = DEF_WILL_FIRE_src_get;
      vcd_write_val(sim_hdl, num++, DEF_b__h2474, 9u);
      backing.DEF_b__h2474 = DEF_b__h2474;
      vcd_write_val(sim_hdl, num++, DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76, 1u);
      backing.DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76 = DEF_fragLenCnt_9_EQ_IF_lenR_0_BIT_9_1_THEN_lenR_0__ETC___d76;
      vcd_write_val(sim_hdl, num++, DEF_lenR___d67, 10u);
      backing.DEF_lenR___d67 = DEF_lenR___d67;
      vcd_write_val(sim_hdl, num++, PORT_EN_newLen_put, 1u);
      backing.PORT_EN_newLen_put = PORT_EN_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_sink_put, 1u);
      backing.PORT_EN_sink_put = PORT_EN_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_src_get, 1u);
      backing.PORT_EN_src_get = PORT_EN_src_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_getLen_dwm, 1u);
      backing.PORT_RDY_getLen_dwm = PORT_RDY_getLen_dwm;
      vcd_write_val(sim_hdl, num++, PORT_RDY_newLen_put, 1u);
      backing.PORT_RDY_newLen_put = PORT_RDY_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_sink_put, 1u);
      backing.PORT_RDY_sink_put = PORT_RDY_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_src_get, 1u);
      backing.PORT_RDY_src_get = PORT_RDY_src_get;
      vcd_write_val(sim_hdl, num++, PORT_getLen_dwm, 1u);
      backing.PORT_getLen_dwm = PORT_getLen_dwm;
      vcd_write_val(sim_hdl, num++, PORT_newLen_put, 9u);
      backing.PORT_newLen_put = PORT_newLen_put;
      vcd_write_val(sim_hdl, num++, PORT_sink_put, 33u);
      backing.PORT_sink_put = PORT_sink_put;
      vcd_write_val(sim_hdl, num++, PORT_src_get, 33u);
      backing.PORT_src_get = PORT_src_get;
    }
}

void MOD_mkMHSender::vcd_prims(tVCDDumpType dt, MOD_mkMHSender &backing)
{
  INST_fragLenCnt.dump_VCD(dt, backing.INST_fragLenCnt);
  INST_headerF.dump_VCD(dt, backing.INST_headerF);
  INST_hp.dump_VCD(dt, backing.INST_hp);
  INST_lenR.dump_VCD(dt, backing.INST_lenR);
  INST_lengthF.dump_VCD(dt, backing.INST_lengthF);
  INST_mesgInF.dump_VCD(dt, backing.INST_mesgInF);
  INST_mesgOutF.dump_VCD(dt, backing.INST_mesgOutF);
  INST_messageF.dump_VCD(dt, backing.INST_messageF);
  INST_mhV.dump_VCD(dt, backing.INST_mhV);
  INST_mhV_1.dump_VCD(dt, backing.INST_mhV_1);
  INST_mhV_2.dump_VCD(dt, backing.INST_mhV_2);
  INST_mhV_3.dump_VCD(dt, backing.INST_mhV_3);
  INST_mhV_4.dump_VCD(dt, backing.INST_mhV_4);
  INST_mhV_5.dump_VCD(dt, backing.INST_mhV_5);
  INST_msgDoneF.dump_VCD(dt, backing.INST_msgDoneF);
}
