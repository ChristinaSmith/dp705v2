//
// Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
//
// On Fri Oct 19 11:51:33 EDT 2012
//
// Method conflict info:
// Method: ingress_put
// Conflict-free: egress_get
// Conflicts: ingress_put
//
// Method: egress_get
// Conflict-free: ingress_put
// Conflicts: egress_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_ingress_put                O     1 reg
// egress_get                     O    33 reg
// RDY_egress_get                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ingress_put                    I    33 reg
// EN_ingress_put                 I     1
// EN_egress_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMHReceiver(CLK,
		    RST_N,

		    ingress_put,
		    EN_ingress_put,
		    RDY_ingress_put,

		    EN_egress_get,
		    egress_get,
		    RDY_egress_get);
  input  CLK;
  input  RST_N;

  // action method ingress_put
  input  [32 : 0] ingress_put;
  input  EN_ingress_put;
  output RDY_ingress_put;

  // actionvalue method egress_get
  input  EN_egress_get;
  output [32 : 0] egress_get;
  output RDY_egress_get;

  // signals for module outputs
  wire [32 : 0] egress_get;
  wire RDY_egress_get, RDY_ingress_put;

  // register captMsgHead
  reg captMsgHead;
  wire captMsgHead_D_IN, captMsgHead_EN;

  // register mhV
  reg [32 : 0] mhV;
  wire [32 : 0] mhV_D_IN;
  wire mhV_EN;

  // register mhV_1
  reg [32 : 0] mhV_1;
  wire [32 : 0] mhV_1_D_IN;
  wire mhV_1_EN;

  // register mhV_2
  reg [32 : 0] mhV_2;
  wire [32 : 0] mhV_2_D_IN;
  wire mhV_2_EN;

  // register mhV_3
  reg [32 : 0] mhV_3;
  wire [32 : 0] mhV_3_D_IN;
  wire mhV_3_EN;

  // register mhV_4
  reg [32 : 0] mhV_4;
  wire [32 : 0] mhV_4_D_IN;
  wire mhV_4_EN;

  // register mhV_5
  reg [32 : 0] mhV_5;
  wire [32 : 0] mhV_5_D_IN;
  wire mhV_5_EN;

  // register mhp
  reg [3 : 0] mhp;
  wire [3 : 0] mhp_D_IN;
  wire mhp_EN;

  // ports of submodule mesgInF
  wire [32 : 0] mesgInF_D_IN, mesgInF_D_OUT;
  wire mesgInF_CLR, mesgInF_DEQ, mesgInF_EMPTY_N, mesgInF_ENQ, mesgInF_FULL_N;

  // ports of submodule mesgOutF
  wire [32 : 0] mesgOutF_D_IN, mesgOutF_D_OUT;
  wire mesgOutF_CLR,
       mesgOutF_DEQ,
       mesgOutF_EMPTY_N,
       mesgOutF_ENQ,
       mesgOutF_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captMsgHeader,
       CAN_FIRE_RL_passMsgPayload,
       CAN_FIRE_RL_take,
       CAN_FIRE_egress_get,
       CAN_FIRE_ingress_put,
       WILL_FIRE_RL_captMsgHeader,
       WILL_FIRE_RL_passMsgPayload,
       WILL_FIRE_RL_take,
       WILL_FIRE_egress_get,
       WILL_FIRE_ingress_put;

  // action method ingress_put
  assign RDY_ingress_put = mesgInF_FULL_N ;
  assign CAN_FIRE_ingress_put = mesgInF_FULL_N ;
  assign WILL_FIRE_ingress_put = EN_ingress_put ;

  // actionvalue method egress_get
  assign egress_get = mesgOutF_D_OUT ;
  assign RDY_egress_get = mesgOutF_EMPTY_N ;
  assign CAN_FIRE_egress_get = mesgOutF_EMPTY_N ;
  assign WILL_FIRE_egress_get = EN_egress_get ;

  // submodule mesgInF
  FIFO2 #(.width(32'd33), .guarded(32'd1)) mesgInF(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(mesgInF_D_IN),
						   .ENQ(mesgInF_ENQ),
						   .DEQ(mesgInF_DEQ),
						   .CLR(mesgInF_CLR),
						   .D_OUT(mesgInF_D_OUT),
						   .FULL_N(mesgInF_FULL_N),
						   .EMPTY_N(mesgInF_EMPTY_N));

  // submodule mesgOutF
  FIFO2 #(.width(32'd33), .guarded(32'd1)) mesgOutF(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(mesgOutF_D_IN),
						    .ENQ(mesgOutF_ENQ),
						    .DEQ(mesgOutF_DEQ),
						    .CLR(mesgOutF_CLR),
						    .D_OUT(mesgOutF_D_OUT),
						    .FULL_N(mesgOutF_FULL_N),
						    .EMPTY_N(mesgOutF_EMPTY_N));

  // rule RL_captMsgHeader
  assign CAN_FIRE_RL_captMsgHeader = mesgInF_EMPTY_N && !captMsgHead ;
  assign WILL_FIRE_RL_captMsgHeader = CAN_FIRE_RL_captMsgHeader ;

  // rule RL_passMsgPayload
  assign CAN_FIRE_RL_passMsgPayload =
	     mesgInF_EMPTY_N && mesgOutF_FULL_N && captMsgHead ;
  assign WILL_FIRE_RL_passMsgPayload = CAN_FIRE_RL_passMsgPayload ;

  // rule RL_take
  assign CAN_FIRE_RL_take = mesgInF_EMPTY_N && mesgOutF_FULL_N ;
  assign WILL_FIRE_RL_take =
	     CAN_FIRE_RL_take && !WILL_FIRE_RL_passMsgPayload &&
	     !WILL_FIRE_RL_captMsgHeader ;

  // register captMsgHead
  assign captMsgHead_D_IN =
	     WILL_FIRE_RL_passMsgPayload ? !mesgInF_D_OUT[32] : mhp == 4'd5 ;
  assign captMsgHead_EN =
	     WILL_FIRE_RL_passMsgPayload || WILL_FIRE_RL_captMsgHeader ;

  // register mhV
  assign mhV_D_IN = mesgInF_D_OUT ;
  assign mhV_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd0 ;

  // register mhV_1
  assign mhV_1_D_IN = mesgInF_D_OUT ;
  assign mhV_1_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd1 ;

  // register mhV_2
  assign mhV_2_D_IN = mesgInF_D_OUT ;
  assign mhV_2_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd2 ;

  // register mhV_3
  assign mhV_3_D_IN = mesgInF_D_OUT ;
  assign mhV_3_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd3 ;

  // register mhV_4
  assign mhV_4_D_IN = mesgInF_D_OUT ;
  assign mhV_4_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd4 ;

  // register mhV_5
  assign mhV_5_D_IN = mesgInF_D_OUT ;
  assign mhV_5_EN = WILL_FIRE_RL_captMsgHeader && mhp == 4'd5 ;

  // register mhp
  assign mhp_D_IN = (mhp == 4'd5) ? 4'd0 : mhp + 4'd1 ;
  assign mhp_EN = CAN_FIRE_RL_captMsgHeader ;

  // submodule mesgInF
  assign mesgInF_D_IN = ingress_put ;
  assign mesgInF_ENQ = EN_ingress_put ;
  assign mesgInF_DEQ =
	     WILL_FIRE_RL_take || WILL_FIRE_RL_captMsgHeader ||
	     WILL_FIRE_RL_passMsgPayload ;
  assign mesgInF_CLR = 1'b0 ;

  // submodule mesgOutF
  assign mesgOutF_D_IN = mesgInF_D_OUT ;
  assign mesgOutF_ENQ = WILL_FIRE_RL_take || WILL_FIRE_RL_passMsgPayload ;
  assign mesgOutF_DEQ = EN_egress_get ;
  assign mesgOutF_CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        captMsgHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mhp <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (captMsgHead_EN)
	  captMsgHead <= `BSV_ASSIGNMENT_DELAY captMsgHead_D_IN;
	if (mhp_EN) mhp <= `BSV_ASSIGNMENT_DELAY mhp_D_IN;
      end
    if (mhV_EN) mhV <= `BSV_ASSIGNMENT_DELAY mhV_D_IN;
    if (mhV_1_EN) mhV_1 <= `BSV_ASSIGNMENT_DELAY mhV_1_D_IN;
    if (mhV_2_EN) mhV_2 <= `BSV_ASSIGNMENT_DELAY mhV_2_D_IN;
    if (mhV_3_EN) mhV_3 <= `BSV_ASSIGNMENT_DELAY mhV_3_D_IN;
    if (mhV_4_EN) mhV_4 <= `BSV_ASSIGNMENT_DELAY mhV_4_D_IN;
    if (mhV_5_EN) mhV_5 <= `BSV_ASSIGNMENT_DELAY mhV_5_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    captMsgHead = 1'h0;
    mhV = 33'h0AAAAAAAA;
    mhV_1 = 33'h0AAAAAAAA;
    mhV_2 = 33'h0AAAAAAAA;
    mhV_3 = 33'h0AAAAAAAA;
    mhV_4 = 33'h0AAAAAAAA;
    mhV_5 = 33'h0AAAAAAAA;
    mhp = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMHReceiver

