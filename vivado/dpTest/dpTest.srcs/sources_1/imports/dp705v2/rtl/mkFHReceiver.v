//
// Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
//
// On Tue Oct 16 11:00:15 EDT 2012
//
// Method conflict info:
// Method: ingress_put
// Conflict-free: egress_get
// Conflicts: ingress_put
//
// Method: egress_get
// Conflict-free: ingress_put
// Conflicts: egress_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_ingress_put                O     1 reg
// egress_get                     O    33 reg
// RDY_egress_get                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ingress_put                    I    33 reg
// EN_ingress_put                 I     1
// EN_egress_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFHReceiver(CLK,
		    RST_N,

		    ingress_put,
		    EN_ingress_put,
		    RDY_ingress_put,

		    EN_egress_get,
		    egress_get,
		    RDY_egress_get);
  input  CLK;
  input  RST_N;

  // action method ingress_put
  input  [32 : 0] ingress_put;
  input  EN_ingress_put;
  output RDY_ingress_put;

  // actionvalue method egress_get
  input  EN_egress_get;
  output [32 : 0] egress_get;
  output RDY_egress_get;

  // signals for module outputs
  wire [32 : 0] egress_get;
  wire RDY_egress_get, RDY_ingress_put;

  // register captFrmHead
  reg captFrmHead;
  wire captFrmHead$D_IN, captFrmHead$EN;

  // register fhV
  reg [32 : 0] fhV;
  wire [32 : 0] fhV$D_IN;
  wire fhV$EN;

  // register fhV_1
  reg [32 : 0] fhV_1;
  wire [32 : 0] fhV_1$D_IN;
  wire fhV_1$EN;

  // register fhV_2
  reg [32 : 0] fhV_2;
  wire [32 : 0] fhV_2$D_IN;
  wire fhV_2$EN;

  // register fhp
  reg [8 : 0] fhp;
  wire [8 : 0] fhp$D_IN;
  wire fhp$EN;

  // ports of submodule mesgInF
  wire [32 : 0] mesgInF$D_IN, mesgInF$D_OUT;
  wire mesgInF$CLR, mesgInF$DEQ, mesgInF$EMPTY_N, mesgInF$ENQ, mesgInF$FULL_N;

  // ports of submodule mesgOutF
  wire [32 : 0] mesgOutF$D_IN, mesgOutF$D_OUT;
  wire mesgOutF$CLR,
       mesgOutF$DEQ,
       mesgOutF$EMPTY_N,
       mesgOutF$ENQ,
       mesgOutF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captFrmHeader,
       CAN_FIRE_RL_passMsgPayload,
       CAN_FIRE_egress_get,
       CAN_FIRE_ingress_put,
       WILL_FIRE_RL_captFrmHeader,
       WILL_FIRE_RL_passMsgPayload,
       WILL_FIRE_egress_get,
       WILL_FIRE_ingress_put;

  // action method ingress_put
  assign RDY_ingress_put = mesgInF$FULL_N ;
  assign CAN_FIRE_ingress_put = mesgInF$FULL_N ;
  assign WILL_FIRE_ingress_put = EN_ingress_put ;

  // actionvalue method egress_get
  assign egress_get = mesgOutF$D_OUT ;
  assign RDY_egress_get = mesgOutF$EMPTY_N ;
  assign CAN_FIRE_egress_get = mesgOutF$EMPTY_N ;
  assign WILL_FIRE_egress_get = EN_egress_get ;

  // submodule mesgInF
  FIFO2 #(.width(32'd33), .guarded(32'd1)) mesgInF(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(mesgInF$D_IN),
						   .ENQ(mesgInF$ENQ),
						   .DEQ(mesgInF$DEQ),
						   .CLR(mesgInF$CLR),
						   .D_OUT(mesgInF$D_OUT),
						   .FULL_N(mesgInF$FULL_N),
						   .EMPTY_N(mesgInF$EMPTY_N));

  // submodule mesgOutF
  FIFO2 #(.width(32'd33), .guarded(32'd1)) mesgOutF(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(mesgOutF$D_IN),
						    .ENQ(mesgOutF$ENQ),
						    .DEQ(mesgOutF$DEQ),
						    .CLR(mesgOutF$CLR),
						    .D_OUT(mesgOutF$D_OUT),
						    .FULL_N(mesgOutF$FULL_N),
						    .EMPTY_N(mesgOutF$EMPTY_N));

  // rule RL_captFrmHeader
  assign CAN_FIRE_RL_captFrmHeader = mesgInF$EMPTY_N && !captFrmHead ;
  assign WILL_FIRE_RL_captFrmHeader = CAN_FIRE_RL_captFrmHeader ;

  // rule RL_passMsgPayload
  assign CAN_FIRE_RL_passMsgPayload =
	     mesgInF$EMPTY_N && mesgOutF$FULL_N && captFrmHead ;
  assign WILL_FIRE_RL_passMsgPayload = CAN_FIRE_RL_passMsgPayload ;

  // register captFrmHead
  assign captFrmHead$D_IN =
	     WILL_FIRE_RL_passMsgPayload ? !mesgInF$D_OUT[32] : fhp == 9'd2 ;
  assign captFrmHead$EN =
	     WILL_FIRE_RL_passMsgPayload || WILL_FIRE_RL_captFrmHeader ;

  // register fhV
  assign fhV$D_IN = mesgInF$D_OUT ;
  assign fhV$EN = WILL_FIRE_RL_captFrmHeader && fhp == 9'd0 ;

  // register fhV_1
  assign fhV_1$D_IN = mesgInF$D_OUT ;
  assign fhV_1$EN = WILL_FIRE_RL_captFrmHeader && fhp == 9'd1 ;

  // register fhV_2
  assign fhV_2$D_IN = mesgInF$D_OUT ;
  assign fhV_2$EN = WILL_FIRE_RL_captFrmHeader && fhp == 9'd2 ;

  // register fhp
  assign fhp$D_IN = (fhp == 9'd2) ? 9'd0 : fhp + 9'd1 ;
  assign fhp$EN = mesgInF$EMPTY_N && !captFrmHead ;

  // submodule mesgInF
  assign mesgInF$D_IN = ingress_put ;
  assign mesgInF$ENQ = EN_ingress_put ;
  assign mesgInF$DEQ =
	     WILL_FIRE_RL_passMsgPayload || WILL_FIRE_RL_captFrmHeader ;
  assign mesgInF$CLR = 1'b0 ;

  // submodule mesgOutF
  assign mesgOutF$D_IN = mesgInF$D_OUT ;
  assign mesgOutF$ENQ = mesgInF$EMPTY_N && mesgOutF$FULL_N && captFrmHead ;
  assign mesgOutF$DEQ = EN_egress_get ;
  assign mesgOutF$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        captFrmHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fhp <= `BSV_ASSIGNMENT_DELAY 9'd0;
      end
    else
      begin
        if (captFrmHead$EN)
	  captFrmHead <= `BSV_ASSIGNMENT_DELAY captFrmHead$D_IN;
	if (fhp$EN) fhp <= `BSV_ASSIGNMENT_DELAY fhp$D_IN;
      end
    if (fhV$EN) fhV <= `BSV_ASSIGNMENT_DELAY fhV$D_IN;
    if (fhV_1$EN) fhV_1 <= `BSV_ASSIGNMENT_DELAY fhV_1$D_IN;
    if (fhV_2$EN) fhV_2 <= `BSV_ASSIGNMENT_DELAY fhV_2$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    captFrmHead = 1'h0;
    fhV = 33'h0AAAAAAAA;
    fhV_1 = 33'h0AAAAAAAA;
    fhV_2 = 33'h0AAAAAAAA;
    fhp = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFHReceiver

